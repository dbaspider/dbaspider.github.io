<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大风起兮云飞扬</title>
  
  <subtitle>进步每一天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dbaspider.github.io/"/>
  <updated>2021-07-03T04:57:08.290Z</updated>
  <id>https://dbaspider.github.io/</id>
  
  <author>
    <name>dbaspider</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Studio Gradle构建依赖冲突的分析和解决</title>
    <link href="https://dbaspider.github.io/2021/07/03/Android-Studio-Gradle%E6%9E%84%E5%BB%BA%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81%E7%9A%84%E5%88%86%E6%9E%90%E5%92%8C%E8%A7%A3%E5%86%B3/"/>
    <id>https://dbaspider.github.io/2021/07/03/Android-Studio-Gradle%E6%9E%84%E5%BB%BA%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81%E7%9A%84%E5%88%86%E6%9E%90%E5%92%8C%E8%A7%A3%E5%86%B3/</id>
    <published>2021-07-03T04:34:21.000Z</published>
    <updated>2021-07-03T04:57:08.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h1><p>如果App或者库依赖了很多第三方组件库，那么依赖冲突就再所难免。不同版本的库混在在一起，明显的冲突会导致编译过程中就报错。<br>不明显的隐含冲突更为严重，因为可以正常构建出app包，但报错可能会在app运行时出现，更加难以处理。</p><p>例如下面是构建时的一个报错：</p><p>build.gradle: Error: All com.android.support libraries must use the exact same version specification (mixing versions can lead to runtime crashes). Found versions 28.0.0, 27.1.0. Examples include com.android.support:animated-vector-drawable:28.0.0 and com.android.support:exifinterface:27.1.0 [GradleCompatible]</p><h1 id="分析哪些库版本冲突了"><a href="#分析哪些库版本冲突了" class="headerlink" title="分析哪些库版本冲突了"></a>分析哪些库版本冲突了</h1><p>简单项目可能人工查看就能定位到，但一般项目都依赖了很多三方组件，人工分析查看就无能为力了。实际上Gradle提供了依赖查看树命令，可以方便的将项目中的全部依赖以tree的形式展现出来，非常便于查看：</p><p>查看全部配置下的依赖树：<br>gradlew -q dependencies app:dependencies</p><p>查看某个具体配置下的依赖树：<br>gradlew -q dependencies app:dependencies –configuration debugAndroidTestCompileClasspath<br>gradlew -q dependencies app:dependencies –configuration debugUnitTestCompileClasspath<br>gradlew -q dependencies app:dependencies –configuration debugCompileClasspath</p><p>gradlew -q dependencies app:dependencies –configuration releaseCompileClasspath<br>gradlew -q dependencies app:dependencies –configuration releaseUnitTestCompileClasspath<br>gradlew -q dependencies app:dependencies –configuration releaseRuntimeClasspath</p><h1 id="如何解决冲突"><a href="#如何解决冲突" class="headerlink" title="如何解决冲突"></a>如何解决冲突</h1><h3 id="1-通过-DependencyResolve-强制修改版本"><a href="#1-通过-DependencyResolve-强制修改版本" class="headerlink" title="1. 通过 DependencyResolve 强制修改版本"></a>1. 通过 DependencyResolve 强制修改版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy.eachDependency &#123; DependencyResolveDetails details -&gt;</span><br><span class="line">        def requested &#x3D; details.requested</span><br><span class="line">        if (requested.group &#x3D;&#x3D; &#39;com.android.support&#39;) &#123;</span><br><span class="line">            if (!requested.name.startsWith(&quot;multidex&quot;)) &#123;</span><br><span class="line">                details.useVersion &#39;28.0.0&#39;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-通过-exclude-排除有问题的版本依赖"><a href="#2-通过-exclude-排除有问题的版本依赖" class="headerlink" title="2. 通过 exclude 排除有问题的版本依赖"></a>2. 通过 exclude 排除有问题的版本依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">androidTestCompile(&#39;com.android.support.test.espresso:espresso-core:2.2.2&#39;, &#123;</span><br><span class="line">        exclude group: &#39;com.android.support&#39;, module: &#39;support-annotations&#39;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">implementation(&#39;com.facebook.android:facebook-login:[4,5)&#39;) &#123;</span><br><span class="line">    &#x2F;&#x2F; contains com.android.support:v7:27.0.2, included required com.android.support.*:27.1.1 modules</span><br><span class="line">    exclude group: &#39;com.android.support&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题介绍&quot;&gt;&lt;a href=&quot;#问题介绍&quot; class=&quot;headerlink&quot; title=&quot;问题介绍&quot;&gt;&lt;/a&gt;问题介绍&lt;/h1&gt;&lt;p&gt;如果App或者库依赖了很多第三方组件库，那么依赖冲突就再所难免。不同版本的库混在在一起，明显的冲突会导致编译过程中就报错。&lt;
      
    
    </summary>
    
    
    
      <category term="Android Studio Gradle 构建 依赖冲突" scheme="https://dbaspider.github.io/tags/Android-Studio-Gradle-%E6%9E%84%E5%BB%BA-%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/"/>
    
  </entry>
  
  <entry>
    <title>WinDbg一般用法(Common usage of WinDbg)</title>
    <link href="https://dbaspider.github.io/2021/07/03/Common-usage-of-WinDbg/"/>
    <id>https://dbaspider.github.io/2021/07/03/Common-usage-of-WinDbg/</id>
    <published>2021-07-03T03:47:53.000Z</published>
    <updated>2021-07-03T04:32:39.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-windbg"><a href="#What-is-windbg" class="headerlink" title="What is windbg?"></a>What is windbg?</h1><p>windbg (formally name is Debugging Tools for Windows).<br>The Windows Debugger (WinDbg) can be used to debug kernel-mode and user-mode code, analyze crash dumps, and examine the CPU registers while the code executes.</p><p>You can get it from <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools</a></p><p>WinDbg是Microsoft Windows上的多用途调试器，可从微软网站上免费下载安装使用。可用于调试用户态下的应用程序、驱动程序，以及核心态下的操作系统自身。该软件是GUI界面，但与更为著名但功能稍弱的Visual Studio Debugger几乎完全不同。</p><p>WinDbg看调试核心态或用户态下的内存卸载文件。</p><p>WinDbg能从服务器自动装载匹配的调试符号文件，如PDB文件。调试符号文件在源代码文件与二进制可执行程序之间创建对应。Microsoft的公开的符号服务器提供了Windows 2000以后各版本操作系统及服务包的绝大部分符号。</p><p>WinDbg较新版本作为免费的Debugging Tools for Windows包的组成部分被发行，在WinDbg与命令行调试器前端如KD，CDB，NTSD之间共享了同一个调试器后端。</p><h1 id="Setup-symbols-search-path"><a href="#Setup-symbols-search-path" class="headerlink" title="Setup symbols search path"></a>Setup symbols search path</h1><p>Open File -&gt; Symble File Path, fill up with:</p><p>C:\myProgramPDB;C:\Windows\symbols;srv<em>D:\localsymbols</em><a href="http://msdl.microsoft.com/download/symbols" target="_blank" rel="noopener">http://msdl.microsoft.com/download/symbols</a></p><p>This includes your app symbols path and system symbols path.</p><p>srv<em>E:\mysymbols</em><a href="http://msdl.microsoft.com/download/symbols" target="_blank" rel="noopener">http://msdl.microsoft.com/download/symbols</a></p><h1 id="Analyze-the-core-dump-file"><a href="#Analyze-the-core-dump-file" class="headerlink" title="Analyze the core dump file"></a>Analyze the core dump file</h1><p>Open File -&gt; Open Crash Dump, browser the dmp file you wish to analyze:</p><p>C:\Windows\LiveKernelReports\WATCHDOG\WD-20210702-0011.dmp<br>C:\Windows\LiveKernelReports\WATCHDOG\WD-20210629-2245.dmp</p><p>then wait some minutes(windbg will download symbols from the internet).</p><p>When windbgt is ready, run “!analyze -v” commmand to let windbg do some auto analyze job…</p><p>kb : Displays the first three parameters that are passed to each function in the stack trace<br>kc : Displays a clean stack trace. Each display line includes only the module name and the function name</p><p>.ecxr : displays the context record that is associated with the current exception<br>~ :  查看系统当前线程，使用<del>*s命令切换线程，如需要切换到8号线程，可以使用命令：</del>8s</p><h1 id="Learn-more"><a href="#Learn-more" class="headerlink" title="Learn more"></a>Learn more</h1><p>Windbg使用简明指南 <a href="https://www.cnblogs.com/daoyuly/p/3570037.html" target="_blank" rel="noopener">https://www.cnblogs.com/daoyuly/p/3570037.html</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What-is-windbg&quot;&gt;&lt;a href=&quot;#What-is-windbg&quot; class=&quot;headerlink&quot; title=&quot;What is windbg?&quot;&gt;&lt;/a&gt;What is windbg?&lt;/h1&gt;&lt;p&gt;windbg (formally nam
      
    
    </summary>
    
    
    
      <category term="windbg usage Windows debug tool" scheme="https://dbaspider.github.io/tags/windbg-usage-Windows-debug-tool/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio Gradle 构建失败：内存不足</title>
    <link href="https://dbaspider.github.io/2021/06/20/Android-Studio-Gradle-%E6%9E%84%E5%BB%BA%E5%A4%B1%E8%B4%A5%EF%BC%9A%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3/"/>
    <id>https://dbaspider.github.io/2021/06/20/Android-Studio-Gradle-%E6%9E%84%E5%BB%BA%E5%A4%B1%E8%B4%A5%EF%BC%9A%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3/</id>
    <published>2021-06-19T16:01:36.000Z</published>
    <updated>2021-06-19T16:16:30.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio-Gradle-Build-failed-with-following-message-in-the-log"><a href="#Android-Studio-Gradle-Build-failed-with-following-message-in-the-log" class="headerlink" title="Android Studio Gradle Build failed with following message in the log:"></a>Android Studio Gradle Build failed with following message in the log:</h1><blockquote><p>Task :AndroidBootstrap:extractDebugAnnotations<br>Task :AndroidBootstrap:mergeDebugGeneratedProguardFiles UP-TO-DATE<br>Task :AndroidBootstrap:mergeDebugConsumerProguardFiles UP-TO-DATE<br>Task :AndroidBootstrap:syncDebugLibJars<br>Task :AndroidBootstrap:bundleDebugAar<br>Task :AndroidBootstrap:compileDebugSources<br>Task :AndroidBootstrap:assembleDebug<br>Task :AndroidBootstrap:parseReleaseLocalResources<br>Task :AndroidBootstrap:writeReleaseAarMetadata<br>Task :AndroidBootstrap:verifyReleaseResources<br>Task :AndroidBootstrap:bundleLibResDebug NO-SOURCE<br>Task :AndroidBootstrap:generateReleaseRFile<br>Daemon will be stopped at the end of the build after running out of JVM memory<br>Task :AndroidBootstrap:bundleLibRuntimeToJarDebug<br>Task :AndroidBootstrap:compileReleaseJavaWithJavac </p></blockquote><p>…<br>      at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.lambda$run$0(DefaultPlanExecutor.java:127)<br>      at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.execute(DefaultPlanExecutor.java:191)<br>      at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.executeNextNode(DefaultPlanExecutor.java:182)<br>      at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.run(DefaultPlanExecutor.java:124)<br>      at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)<br>      at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)<br>      at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)<br>      at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)<br>      at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)<br>      at java.lang.Thread.run(Thread.java:748)<br>  Caused by: java.lang.OutOfMemoryError: Metaspace</p><ul><li><p>Try:<br>Run with –stacktrace option to get the stack trace. Run with –info or –debug option to get more log output. Run with –scan to get full insights.</p></li><li><p>Get more help at <a href="https://help.gradle.org" target="_blank" rel="noopener">https://help.gradle.org</a></p></li></ul><p>BUILD FAILED in 3m 1s</p><p>FAILURE: Build failed with an exception.</p><ul><li><p>What went wrong:<br>Metaspace</p></li><li><p>Try:<br>Run with –stacktrace option to get the stack trace. Run with –info or –debug option to get more log output. Run with –scan to get full insights.</p></li><li><p>Get more help at <a href="https://help.gradle.org" target="_blank" rel="noopener">https://help.gradle.org</a></p></li></ul><p>BUILD FAILED in 3m 1s</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Check the jvmargs parameter in file gradle.properties (project root dir):</p><p>#The setting is particularly useful for tweaking memory settings.<br>org.gradle.jvmargs=-Xmx1536m</p><p>You need add the org.gradle.jvmargs line or modify its value to be more larger than current.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-Studio-Gradle-Build-failed-with-following-message-in-the-log&quot;&gt;&lt;a href=&quot;#Android-Studio-Gradle-Build-failed-with-following-me
      
    
    </summary>
    
    
    
      <category term="Android Studio Gradle 构建失败 内存不足 OutOfMemoryError Metaspace" scheme="https://dbaspider.github.io/tags/Android-Studio-Gradle-%E6%9E%84%E5%BB%BA%E5%A4%B1%E8%B4%A5-%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3-OutOfMemoryError-Metaspace/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 中文乱码问题彻底解决</title>
    <link href="https://dbaspider.github.io/2021/06/19/Android-Studio-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E5%BD%BB%E5%BA%95%E8%A7%A3%E5%86%B3/"/>
    <id>https://dbaspider.github.io/2021/06/19/Android-Studio-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E5%BD%BB%E5%BA%95%E8%A7%A3%E5%86%B3/</id>
    <published>2021-06-19T15:26:48.000Z</published>
    <updated>2021-06-19T15:56:03.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Add-these-three-lines-in-this-file-and-restart"><a href="#Add-these-three-lines-in-this-file-and-restart" class="headerlink" title="Add these three lines in this file and restart:"></a>Add these three lines in this file and restart:</h1><p>C:\Users\Administrator\AppData\Roaming\Google\AndroidStudio4.2\studio64.exe.vmoptions</p><p>-Dfile.encoding=UTF-8<br>-Duser.country=US<br>-Duser.language=en</p><h1 id="For-memo"><a href="#For-memo" class="headerlink" title="For memo"></a>For memo</h1><h3 id="Before-modify"><a href="#Before-modify" class="headerlink" title="Before modify:"></a>Before modify:</h3><p>“C:\Program Files\Java\jdk1.8.0_202\bin\java.exe” -Djava.security.manager=worker.org.gradle.process.internal.worker.child.BootstrapSecurityManager -Xmx512m -Dfile.encoding=UTF-8 -Duser.country=CN -Duser.language=zh -Duser.variant -cp C:\Users\Administrator.gradle\caches\6.5\workerMain\gradle-worker.jar worker.org.gradle.process.internal.worker.GradleWorkerMain “‘Gradle Worker Daemon 9’”</p><h3 id="After-modify"><a href="#After-modify" class="headerlink" title="After modify:"></a>After modify:</h3><p>“C:\Program Files\Java\jdk1.8.0_202\bin\java.exe” -Djava.security.manager=worker.org.gradle.process.internal.worker.child.BootstrapSecurityManager -Xmx512m -Dfile.encoding=UTF-8 -Duser.country=US -Duser.language=en -Duser.variant -cp C:\Users\Administrator.gradle\caches\6.5\workerMain\gradle-worker.jar worker.org.gradle.process.internal.worker.GradleWorkerMain “‘Gradle Worker Daemon 1’”</p><p>“C:\Program Files\Java\jdk1.8.0_202\bin\java.exe” -XX:MaxMetaspaceSize=256m -XX:+HeapDumpOnOutOfMemoryError -Xms256m -Xmx512m -Dfile.encoding=UTF-8 -Duser.country=US -Duser.language=en -Duser.variant -cp C:\Users\Administrator.gradle\wrapper\dists\gradle-6.5-all\2oz4ud9k3tuxjg84bbf55q0tn\gradle-6.5\lib\gradle-launcher-6.5.jar org.gradle.launcher.daemon.bootstrap.GradleDaemon 6.5</p><p>“C:\Program Files\Java\jdk1.8.0_202\bin\java.exe” -Xmx1536m -Dfile.encoding=UTF-8 -Duser.country=US -Duser.language=en -Duser.variant -cp C:\Users\Administrator.gradle\wrapper\dists\gradle-6.5-all\2oz4ud9k3tuxjg84bbf55q0tn\gradle-6.5\lib\gradle-launcher-6.5.jar org.gradle.launcher.daemon.bootstrap.GradleDaemon 6.5</p><h1 id="Bugs-for-Android-Studio-IntelliJ-IDEA"><a href="#Bugs-for-Android-Studio-IntelliJ-IDEA" class="headerlink" title="Bugs for Android Studio / IntelliJ IDEA"></a>Bugs for Android Studio / IntelliJ IDEA</h1><p>But when generating javadoc, Android Studio does not use any options in file studio64.exe.vmoptions, you can execute in commandline and add “-J-Duser.language=en” manualy:</p><p>“C:\Program Files\Java\jdk1.8.0_202\bin\javadoc.exe” -J-Duser.language=en @D:\Downloads\Android-xxx\build\tmp\androidJavadocs\javadoc.options</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Add-these-three-lines-in-this-file-and-restart&quot;&gt;&lt;a href=&quot;#Add-these-three-lines-in-this-file-and-restart&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
    
      <category term="Android Studio IntelliJ IDEA JAVA 中文 乱码 控制台" scheme="https://dbaspider.github.io/tags/Android-Studio-IntelliJ-IDEA-JAVA-%E4%B8%AD%E6%96%87-%E4%B9%B1%E7%A0%81-%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 4.2升级后问题处理案例集锦</title>
    <link href="https://dbaspider.github.io/2021/06/15/Android-Studio-4-2%E5%8D%87%E7%BA%A7%E5%90%8E%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B%E4%B8%A4%E5%88%99/"/>
    <id>https://dbaspider.github.io/2021/06/15/Android-Studio-4-2%E5%8D%87%E7%BA%A7%E5%90%8E%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E6%A1%88%E4%BE%8B%E4%B8%A4%E5%88%99/</id>
    <published>2021-06-15T10:29:59.000Z</published>
    <updated>2021-06-15T11:00:14.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>先看看 Android Studio 4.2 带来了啥新玩意：</p><ul><li>按变体配置应用签名</li><li>针对JDK 11 优化Gradle 构建</li><li>System Trace：改进了内存和图形的指标</li><li>现在，R8 retrace 包含在命令行工具中</li><li>新增布局检查器刷新操作</li><li>Jetpack Compose 的Android Gradle 插件支持</li><li>适用于AGP 的升级助理</li><li>…</li></ul><p>balabala，说的不少，但也没看出有什么特别的地方。<br>更多内容，见原文 <a href="https://developer.android.com/studio/preview/features?hl=zh-cn#4.2" target="_blank" rel="noopener">https://developer.android.com/studio/preview/features?hl=zh-cn#4.2</a></p><p>如果原来版本用的挺好的，不建议升级。但对于新版本强迫症患者，肯定会手贱升级一波的，然后问题就来了…</p><h2 id="问题-1-Gradle-Task面板中啥都看不到了"><a href="#问题-1-Gradle-Task面板中啥都看不到了" class="headerlink" title="问题 1: Gradle Task面板中啥都看不到了"></a>问题 1: Gradle Task面板中啥都看不到了</h2><p>原因：这是因为新版本中，AS中在Experimental一栏中有新的内容修改，但是在它的What’s New in 4.2中是没有任何体现的，并且非常体贴的默认给你勾选了”Do not build Gradle task list during Gradle sync”，让你体验一波新版本的福利，解决办法也就显而易见了。</p><p>解决办法：Setting中去掉这项的勾选: “Do not build Gradle task list during Gradle sync”，然后再 Sync Project</p><h2 id="问题-2-构建时报错-java-lang-NoClassDefFoundError-javax-xml-bind-JAXBException"><a href="#问题-2-构建时报错-java-lang-NoClassDefFoundError-javax-xml-bind-JAXBException" class="headerlink" title="问题 2: 构建时报错: java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException"></a>问题 2: 构建时报错: java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException</h2><p>问题原因：在 Android Studio 中运行时，Gradle 构建工具使用 Android Studio 中设置的默认 JDK 版本。在以前的版本中，默认情况下使用 JDK 8；但在 4.2 中，默认的 JDK 版本为 JDK 11。JDK 11 的这项更新会影响 JVM 垃圾回收器的默认配置，因为 JDK 8 使用并行垃圾回收器，而 JDK 11 使用 G1 垃圾回收器。</p><p>解决办法：Project Structure -&gt; Platform Settings\SDKs -&gt; Android API xx Platform -&gt; Change “Java SDK” to 1.8</p><h2 id="问题-3-插件问题"><a href="#问题-3-插件问题" class="headerlink" title="问题 3: 插件问题"></a>问题 3: 插件问题</h2><p>4.2 中插件路径修改了，可能需要重新安装插件。在Android studio 4.2中plugin目录发生了变化：<br>Plugin folder has changed in 4.2 version;<br>From : ~/Library/Application\ Support/AndroidStudio4.2<br>To   : ~/Library/Application\ Support/Google/AndroidStudio4.2/plugins</p><p>ln -s ~/Library/Application\ Support/Google/AndroidStudio4.2/plugins ~/Library/Application\ Support/AndroidStudio4.2</p><h2 id="莫名其妙的其他问题"><a href="#莫名其妙的其他问题" class="headerlink" title="莫名其妙的其他问题"></a>莫名其妙的其他问题</h2><p>问题描述：比如编译时突然提示文件名过长，无法删除文件之类的提示。<br>解决办法：可尝试将kotlin版本升级到最新的1.5.0以上，build gradle插件4.2.0以上，主项目gradle 6.7.1以上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;先看看 Android Studio 4.2 带来了啥新玩意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按变体配置应用签名&lt;/li&gt;
&lt;li&gt;针对JDK 
      
    
    </summary>
    
    
    
      <category term="Android Studio 4.2 升级 问题 案例" scheme="https://dbaspider.github.io/tags/Android-Studio-4-2-%E5%8D%87%E7%BA%A7-%E9%97%AE%E9%A2%98-%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>KiB、KB和Kb傻傻分不清？</title>
    <link href="https://dbaspider.github.io/2021/04/26/KiB%E3%80%81KB%E5%92%8CKb%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%EF%BC%9F/"/>
    <id>https://dbaspider.github.io/2021/04/26/KiB%E3%80%81KB%E5%92%8CKb%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%EF%BC%9F/</id>
    <published>2021-04-26T04:55:12.000Z</published>
    <updated>2021-04-26T05:49:23.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KiB、MiB与KB、MB的区别"><a href="#KiB、MiB与KB、MB的区别" class="headerlink" title="KiB、MiB与KB、MB的区别"></a>KiB、MiB与KB、MB的区别</h1><p>KB和MB是由 国际单位制(SI)制定的十进制标准，而KiB和Mib是由国际电工委员会(IEC)制定的二进制标准。<br>也就是通常所说的SI和IEC标准。</p><p>具体换算关系：</p><p>不带“i”的单位换算:</p><ul><li>1KB = 10^3 = 1000 Byte</li><li>1MB = 10^6 = 1000*1000 Byte = 1000KB</li></ul><p>带“i”的单位换算</p><ul><li>1KiB = 2^10 = 1024 Byte</li><li>1MiB = 2^20 = 1024*1024 Byte = 1024KiB</li></ul><h1 id="历史由来"><a href="#历史由来" class="headerlink" title="历史由来"></a>历史由来</h1><p>硬盘的容量用了1000进位而不是以2进制为底的1024进位这个问题已经是常识了，但是存储厂商这么标反而是符合标准的。可能有些朋友在Linux和macOS中见过容量单位的两个大写字母中插了一个i的，比如KiB、MiB、GiB这样的单位，那么它和我们常用的KB、MB和GB有什么区别呢？</p><p>KB代表国际单位制标准规定的1000进位，KiB这类中间带个”i”的是1024进位法的标准写法。Windows使用1024进位，但是没有按照标准写，Linux和macOS等很多其他系统使用1000进位，并且按照规范写了。Kb这类代表1000进位，计量单位为bit而不是byte的单位，常见于描述带宽和媒体码率。</p><p>还是要扯到二进制与十进制身上。</p><p>在国际通用的国际单位制标准（SI）中，对于一个单位的倍数和分数，有着详细的定义。比如对于赫兹这一用于描述频率的导出单位，1000倍时可以称为千赫兹（kHz），1000000（百万）倍时，称为兆赫兹（MHz），再往上以1000倍跳就是吉赫兹（GHz）、太赫兹（THz）……（注意，标准中代表“千”的字母k必须为小写）</p><p>而这些放在单位名之前的字母，其实都是一些代表数量的单词的首字母，比如k是kilo，M是mega，G是giga……这些词代表的数有一个特征——它们都是以10为底数的幂。</p><p>然而到了计算机工业中，在底层的硬件电路中，通用的是二进制，基于十进制的国际单位制对它没用，反而会带来麻烦。为了方便描述以2为底的大数字幂，工程师们联合了起来，由国际电工委员会（IEC）制定了新的用于1024进位的数字前缀，其实就是将原本对应单词中的最后两位改成了”bi”，以代表二进制（binary），而对应的缩写，也从原本的单字母变成了附上”i”，比如kB变成KiB，MB变成MiB，全称为kibibytes，mebibytes。</p><p>但因为这套标准在1998年才提出，虽然马上写入了ISO标准中，但当时Windows都已经出Windows 98了，所以并没能很好的统一整个计算机业界，很多系统和厂商仍然保持了1 KB=1024 Bytes的表示方式，并没有附上”i”。内存方面的JEDEC标准也仍然我行我素，采用了与Windows一样的表示方法，所以我们今天在内存上看到的GB、MB等单位都是1024进位的。而硬盘存储业界，仍然使用1 KB=1000 Bytes的国际单位制标准对容量进行描述。</p><p>不过在Linux下，有一些程序提供了两种表示方式，但也不是都按照标准来写单位，比如：</p><p>再来看到B的大小写区别这个老生常谈的话题上，大写B指的是byte即字节，小写b指的是bit即比特，1 byte = 8 bits。常见使用bit而不是byte来描述的量就是比特率了，比如1000 kb/s，或者写成1000 kbps的形式，都是一样的。而在描述通信带宽的时候也往往会使用bit，比如现在的千兆局域网、百兆光宽带就是1000Mbps、100Mbps而不是1000MB/s、100MB/s，而我们实际看到的文件传输速度使用的是byte来描述，两者有一个八倍的换算关系。</p><p>而同样在这里，国际单位制占据了统治的地位，这些使用bit作为单位的量，大部分采用的都是1000进位而不是1024进位，所以在换算的时候还要考虑到这个因素，于是，我们在Windows下能够看到的百兆宽带最大的理论速度就变成了：</p><p>100 Mb/s = 100 × 1000 × 1000 = 100,000,000 b/s</p><p>100,000,000 b/s = 12,500,000 B/s = 12,207.03125 KiB/s = 11.92 MiB/s</p><p>同理，因为Windows并不遵守规范，所以这个最终显示给你的数字是11.92MB/s，但切记，这不是正确的表示方法。</p><h1 id="看懂网速表示中-Mbps、Mb-s、MB-s-区别"><a href="#看懂网速表示中-Mbps、Mb-s、MB-s-区别" class="headerlink" title="看懂网速表示中 Mbps、Mb/s、MB/s 区别"></a>看懂网速表示中 Mbps、Mb/s、MB/s 区别</h1><p>运营商或者设备商都喜欢将网速标注为Mbps而不是MB/S,不知道各位有没有注意过，设备厂商——华为、中兴、诺基亚之流，运营商——中国移动、联通、电信，亦或是终端制造商——小米、OPPO等，在进行网速宣传时，其速率单位都用的Mbps。例如前不久中国联通宣布，其5G网络测试速率基本上已经全部能达到900+Mbps的速率，有些甚至能够达到1.1Gbps。但是我们平时在讨论网速好坏时，都说的是“MB/s”，也就是每秒几多兆。</p><p>换算关系：</p><ul><li>B = Byte</li><li>b = bit</li><li>1 Kb = 1024 bit</li><li>1 KB = 1024 Byte</li><li>1 Mb = 1024 Kb</li><li>1 MB = 1024 KB</li><li>1 Byte = 8 bit</li><li>1 MB = 8Mb</li><li>1 Mb = 0.125 MB</li></ul><p>其中，bit（比特，1比特代表1个位）是信息的最小单位，是二进制数的一位包含的信息或2个选项中特别指定1个的需要信息量。一般来说，n比特的信息量可以表现出2的n次方种选择。</p><p>而Byte（字节）是计算机信息技术用于计量存储容量的一种计量单位，作为一个单位来处理的一个二进制数字串，是构成信息的一个小单位。最常用的字节是八位的字节，即它包含八位的二进制数。一个位就代表一个0或1（即二进制），每8个位组成一个字节（Byte，简写为B）。</p><p>那么答案就出来了，1 Byte = 8 bit，每秒传输多少bit、每秒传输多少Byte，我们可以用Byte/s、bit/s来表示，换算一下就可以得出8Mbps=8Mb/s=1MB/s。</p><p>通常，运营商说的1M宽带的M是指Mb/s，也就是Mbps，换算一下的话，1M宽带下载速度也就是125KB/s，再去掉损耗的话就是120KB/s左右。以此类推，10M宽带的最快下载速度是1.25MB/s，100M的宽带最快下载速度是12.5MB/s。</p><p>为什么网速用Mbps而不是MB/s呢，呵呵，实际还是营销噱头，数字越大越对消费者有吸引力罢了。<br>我们知道，计算机是以Bit和Byte作为计算单位，其中bit（比特）是电脑辨识讯息的最小单位，再上一个更大的单位为Byte（字节）。<br>一般来说，数据传输速度大多是以“位”（bit，又名“比特”）为单位的，这也就是为什么网速的单位都是Mbps而不是MB/s了，而数据存储是则以“字节”（Byte）为单位，比如硬盘的读写速度一般就用的是MB/S。</p><p>例如著名的SSD测试软件的结果显示：<br><img src="https://img.ithome.com/newsuploadfiles/2019/8/20190805_193841_549.jpeg" alt="AS SSD  Benchmark"></p><p>无论是以Byte还是bit作为网速单位其实都是正确的，但是我们在在书写单位时一定要注意B字母的大小写，此时B字母的大小写真的可以称之为“失之毫厘，谬以千里”。其实运营商等在宣传的时候，Mbps作为网络速率单位是最正确的，因为数据的传输以及运营商在流量收费的时候都是按照比特来计算的；但从消费者的角度来看，MB/s符合我们大众的生活习惯，而且也便于理解。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然有标准约定，但很多厂商并不遵守，加上这么多年的混用，实际中还是要根据具体环境和上下文来确定。一般的辨识原则是：</p><p>K单独出现时，代表1000 或 1024，一般会附有备注说明<br>K与Ki一起出现时，K代表1000，Ki代表1024<br>K与k一起出现时，K代表1024，k代表1000</p><p>另外，还有注意是在网速还是存储领域，b/B(bit和Byte)是大写还是小写。小写b表示bit位，大写B表示Byte，1 Byte = 8 bit</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.expreview.com/71068.html" target="_blank" rel="noopener">有问有答：KiB、KB和Kb傻傻分不清？</a><br><a href="https://www.ithome.com/0/437/491.htm" target="_blank" rel="noopener">一文看懂 Mbps、Mb/s、MB/s 有什么区别</a><br><a href="https://zh.wikipedia.org/wiki/Kibibyte" target="_blank" rel="noopener">维基百科 Kibibyte</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;KiB、MiB与KB、MB的区别&quot;&gt;&lt;a href=&quot;#KiB、MiB与KB、MB的区别&quot; class=&quot;headerlink&quot; title=&quot;KiB、MiB与KB、MB的区别&quot;&gt;&lt;/a&gt;KiB、MiB与KB、MB的区别&lt;/h1&gt;&lt;p&gt;KB和MB是由 国际单位制(
      
    
    </summary>
    
    
    
      <category term="KiB KB Kb MiB GiB MB GB" scheme="https://dbaspider.github.io/tags/KiB-KB-Kb-MiB-GiB-MB-GB/"/>
    
  </entry>
  
  <entry>
    <title>如何让BeyondCompare3支持新版本的rar压缩文档</title>
    <link href="https://dbaspider.github.io/2021/04/13/%E8%AE%A9BeyondCompare3%E6%94%AF%E6%8C%81%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84rar%E5%8E%8B%E7%BC%A9%E6%96%87%E6%A1%A3/"/>
    <id>https://dbaspider.github.io/2021/04/13/%E8%AE%A9BeyondCompare3%E6%94%AF%E6%8C%81%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84rar%E5%8E%8B%E7%BC%A9%E6%96%87%E6%A1%A3/</id>
    <published>2021-04-13T15:26:55.000Z</published>
    <updated>2021-04-13T15:47:08.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>Beyond Compare 是个非常好用的代码/文件比较工具，3.x版本是个用的比较多的版本，而且支持zip/rar文档（不用解压直接作为目录）的比较。<br>winrar是个windows下面非常流行的压缩工具，最新的版本是已经到了6.x了。rar文档格式从5版本开始做了一次修改，而且从5版本开始，<br>默认格式就是v5版本，跟原来的格式不兼容，如果用低于winrar 5.x版本的winrar去打开新版本文件，会报无法识别或文件损坏。<br>这个时候用Beyond Compare去比较winrar v5版本生成的压缩文档的话，会报文件找不到，打开错误。不知情的人还以为是rar文<br>件本身坏了。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>winrar是个商业软件，压缩算法是不公开的，但解压算法是公开的，而且免费提供unrar dll给第三方软件集成用。Beyond Compare 3也是集成了unrar dll。<br>因此，我们可以用新版本的unrar dll替换老版本(v3.9)的即可。</p><hr><p>链接：<a href="https://pan.baidu.com/s/1y2zfKiCY9E62NdI_1HuFHA" target="_blank" rel="noopener">https://pan.baidu.com/s/1y2zfKiCY9E62NdI_1HuFHA</a><br>提取码：l2sf<br>复制这段内容后打开百度网盘手机App，操作更方便哦–来自百度网盘超级会员V5的分享</p><hr><p>unrar新版本dll从上面网盘共享中获取，替换下面文件中的对应文件即可（建议将原来的文件重命名备份下）：</p><p>C:\Program Files (x86)\Beyond Compare 3\UnRAR.dll</p><p>注意，如果你安装的是x64版本，一般安装目录如下，请使用网盘文件中x64目录下对应的dll：<br>C:\Program Files\Beyond Compare 3\UnRAR.dll</p><h3 id="enjoy-coding-enjoy-life"><a href="#enjoy-coding-enjoy-life" class="headerlink" title="enjoy coding, enjoy life!"></a>enjoy coding, enjoy life!</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;Beyond Compare 是个非常好用的代码/文件比较工具，3.x版本是个用的比较多的版本，而且支持zip/rar文档（不用解压直接作为
      
    
    </summary>
    
    
    
      <category term="BeyondCompare winrar v5" scheme="https://dbaspider.github.io/tags/BeyondCompare-winrar-v5/"/>
    
  </entry>
  
  <entry>
    <title>华为手机怎么解锁和ROOT</title>
    <link href="https://dbaspider.github.io/2021/04/04/%E5%8D%8E%E4%B8%BA%E6%89%8B%E6%9C%BA%E6%80%8E%E4%B9%88%E8%A7%A3%E9%94%81%E5%92%8CROOT/"/>
    <id>https://dbaspider.github.io/2021/04/04/%E5%8D%8E%E4%B8%BA%E6%89%8B%E6%9C%BA%E6%80%8E%E4%B9%88%E8%A7%A3%E9%94%81%E5%92%8CROOT/</id>
    <published>2021-04-04T15:00:14.000Z</published>
    <updated>2021-04-04T15:48:00.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为何要root"><a href="#为何要root" class="headerlink" title="为何要root"></a>为何要root</h1><p>一般想把手机root的不外乎下面3种用户：<br>1、搞机爱好者，喜欢折腾；<br>2、app开发者，有了root权限更方便开发和调试app；实际没有root，一般的开发和调试也没问题，只是有时候想查看下app里面的数据或者获取日志不太方便而已；<br>3、逆向或安全工作者，这个就不用说了。</p><h1 id="查看机型是否能root"><a href="#查看机型是否能root" class="headerlink" title="查看机型是否能root"></a>查看机型是否能root</h1><p>首先，想root必须先获取手机的BL解锁码。但不是任何一步华为手机都能获取到解锁码(华为内部手机开发部门开发用的手机一般都是root过的，这个外部拿不到)。<br>因为华为公司已于2018年5月24日后对新上市产品停止解锁码服务，一般来说，如果你的手机是2018年5月24日前上市的，可以到T宝上找商家远程获取到解锁码。<br>具体可把手机机型提供给对方，询问是否可以。像 荣耀 3c / 3x / 4x / 5c / 6 / 7 / 8 / 9 / 10 / 荣耀V10，mate 7 / 8 / 9 / mate 10 / mate 10 pro，p 10 / p20 等等，<br>这些机型都是可以的。具体支持机型可以这里查询：<a href="http://www.7to.cn/model.html" target="_blank" rel="noopener">http://www.7to.cn/model.html</a></p><h1 id="获取bootloader解锁码"><a href="#获取bootloader解锁码" class="headerlink" title="获取bootloader解锁码"></a>获取bootloader解锁码</h1><p>这个就不多说了，现在只能花钱到T宝上找商家远程获取到解锁码，一般30~50不等。</p><h1 id="刷入TWRP获取root权限"><a href="#刷入TWRP获取root权限" class="headerlink" title="刷入TWRP获取root权限"></a>刷入TWRP获取root权限</h1><p>如果T宝上能提供解锁+root一条龙服务最好，现在一般只提供解锁服务。解锁后就可以刷入开了root权限的包了。<br>网上各种刷root教程和包，但基本没有可用的，或者跟自己手机版本对不上。<br>踩了很多坑，发现<a href="http://www.7to.cn/" target="_blank" rel="noopener">奇兔一键刷机 http://www.7to.cn/</a>，很不错，建议花钱买方便，10~15块钱，一键搞定。</p><h1 id="解除root恢复到正常ROM"><a href="#解除root恢复到正常ROM" class="headerlink" title="解除root恢复到正常ROM"></a>解除root恢复到正常ROM</h1><p>使用华为手机的eRecovery来恢复系统至官方版本。eRecovery适用场景：手机不能开机或系统不稳定可以使用eRecovery修复系统。</p><h2 id="前提条件："><a href="#前提条件：" class="headerlink" title="前提条件："></a>前提条件：</h2><p>1、有可连接的WLAN热点(建议连接家庭WLAN网络，尽量不要使用公共场所WLAN网络，确保网络下载速度顺畅）。<br>2、手机电池电量大于30%</p><h2 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h2><ol><li>将手机关机后，且USB在连接电脑的状态下，长按【音量上键】+【电源键】15秒左右，手机会自动重启进入华为系统恢复(eRecovery)模式。</li><li>在eRecovery主界面点击”下载最新版本并恢复”。</li><li>在下载界面点击”下载并恢复”，系统将启动WLAN系统，并扫描可用热点。</li><li>选择可用WLAN热点并输入密码，则开始连接热点。</li><li>系统将自动获取安装包信息并自动下载，无需其他操作。这个过程需要一定时间，请耐心等待。</li><li>下载完成后系统自动进行升级安装，升级成功后倒计时自动重启进入主系统</li></ol><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>出厂版本为EMUI 4.0及以上机型支持eRecovery。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为何要root&quot;&gt;&lt;a href=&quot;#为何要root&quot; class=&quot;headerlink&quot; title=&quot;为何要root&quot;&gt;&lt;/a&gt;为何要root&lt;/h1&gt;&lt;p&gt;一般想把手机root的不外乎下面3种用户：&lt;br&gt;1、搞机爱好者，喜欢折腾；&lt;br&gt;2、app开发者
      
    
    </summary>
    
    
    
      <category term="华为手机 解锁 ROOT BOOTLOADER UNLOCK TWRP" scheme="https://dbaspider.github.io/tags/%E5%8D%8E%E4%B8%BA%E6%89%8B%E6%9C%BA-%E8%A7%A3%E9%94%81-ROOT-BOOTLOADER-UNLOCK-TWRP/"/>
    
  </entry>
  
  <entry>
    <title>华为手机禁用系统更新的办法</title>
    <link href="https://dbaspider.github.io/2021/04/04/%E5%8D%8E%E4%B8%BA%E6%89%8B%E6%9C%BA%E7%A6%81%E7%94%A8%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0%E7%9A%84%E5%8A%9E%E6%B3%95/"/>
    <id>https://dbaspider.github.io/2021/04/04/%E5%8D%8E%E4%B8%BA%E6%89%8B%E6%9C%BA%E7%A6%81%E7%94%A8%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0%E7%9A%84%E5%8A%9E%E6%B3%95/</id>
    <published>2021-04-04T14:24:45.000Z</published>
    <updated>2021-04-04T15:56:59.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目的说明"><a href="#目的说明" class="headerlink" title="目的说明"></a>目的说明</h1><p>有时候不想更新到新版本，但系统老是提示自动更新，小红点冒出来看见心烦。<br>尤其是一些较早的手机，比如荣耀10，因为cpu是麒麟970，运行emui 9.0/9.1很流畅，<br>但是升级到emui 10.0，那叫一个惨，所以这个时候就可以把系统更新禁用掉，<em>^_^</em></p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="打开开发者模式"><a href="#打开开发者模式" class="headerlink" title="打开开发者模式"></a>打开开发者模式</h2><p>设置–&gt;系统–&gt;关于手机，连续点击7次“版本号”栏，屏幕将出现提示“您正处于开发者模式”，返回上一步“系统”界面，打开“开发人员选项”，关闭“自动系统更新”，打开“USB调试”以及打开“仅充电”模式下允许ADB调试。</p><h2 id="下载adb工具包"><a href="#下载adb工具包" class="headerlink" title="下载adb工具包"></a>下载adb工具包</h2><p>1、下载ADB和驱动，网盘地址链接：<a href="https://pan.baidu.com/s/11QBdu-woPni_ZuE6P7BOAw" target="_blank" rel="noopener">https://pan.baidu.com/s/11QBdu-woPni_ZuE6P7BOAw</a> 提取码：fe2v<br>2、安装驱动，下载包中Handset+WinDriver.exe，进行安装。安装完，把华为手机连上电脑，会自动安装驱动，手机会提示是否usb接口模式和允许使用USB调试模式【一定要等几分钟才能出提示，所以要有耐心】<br>3、解压下载包中的adb到C盘<br>4、运行CMD，输入cd c:\adb，确保当前目录是C盘adb文件夹</p><h1 id="禁用系统更新"><a href="#禁用系统更新" class="headerlink" title="禁用系统更新"></a>禁用系统更新</h1><p>注意手机要连接电脑，并在开发人员选项中开启USB调试和“仅充电”模式下允许adb调试，运行下面命令查看设备是否连接正常：<br>adb devices</p><p>List of devices attached<br>xxxxxxxxxxxxxxxxxxxx    device</p><p>如果出现 unauthrorized 字样，则到开发人员选项中查看”USB调试”开关是否打开了。</p><h2 id="运行下面命令，停止系统更新："><a href="#运行下面命令，停止系统更新：" class="headerlink" title="运行下面命令，停止系统更新："></a>运行下面命令，停止系统更新：</h2><p>adb shell pm disable-user com.huawei.android.hwouc</p><p>Package com.huawei.android.hwouc new state: disabled-user 出现这个结果提示，表面操作成功了。</p><h2 id="如果前面检查过系统更新，出现了小红点提示，想去掉这个提示，操作如下："><a href="#如果前面检查过系统更新，出现了小红点提示，想去掉这个提示，操作如下：" class="headerlink" title="如果前面检查过系统更新，出现了小红点提示，想去掉这个提示，操作如下："></a>如果前面检查过系统更新，出现了小红点提示，想去掉这个提示，操作如下：</h2><p>手机上断开WIFI和移动网络，设置-应用管理-系统更新-存储-删除数据，然后再依次打开设置——系统更新，点击“检查更新”，目的是消除已有的新系统提醒红点角标。</p><h1 id="恢复系统更新"><a href="#恢复系统更新" class="headerlink" title="恢复系统更新"></a>恢复系统更新</h1><p>准备同上，运行下面命令恢复系统更新功能:</p><p>adb shell pm enable com.huawei.android.hwouc</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目的说明&quot;&gt;&lt;a href=&quot;#目的说明&quot; class=&quot;headerlink&quot; title=&quot;目的说明&quot;&gt;&lt;/a&gt;目的说明&lt;/h1&gt;&lt;p&gt;有时候不想更新到新版本，但系统老是提示自动更新，小红点冒出来看见心烦。&lt;br&gt;尤其是一些较早的手机，比如荣耀10，因为cpu
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hexo系列-5-重装系统如何备份和恢复</title>
    <link href="https://dbaspider.github.io/2021/01/11/Hexo%E7%B3%BB%E5%88%97-5-%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D/"/>
    <id>https://dbaspider.github.io/2021/01/11/Hexo%E7%B3%BB%E5%88%97-5-%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BD%E5%92%8C%E6%81%A2%E5%A4%8D/</id>
    <published>2021-01-11T15:24:05.000Z</published>
    <updated>2021-01-11T15:34:56.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、备份博客目录和配置"><a href="#1、备份博客目录和配置" class="headerlink" title="1、备份博客目录和配置"></a>1、备份博客目录和配置</h2><p>如果操作系统需要重新安装，则需要在安装前将你的博客工作目录如blog进行备份（通过复制或者压缩）。<br>当然，如果你的blog目录不在系统盘上，就可以省略这一步。</p><h2 id="2、恢复博客目录和配置"><a href="#2、恢复博客目录和配置" class="headerlink" title="2、恢复博客目录和配置"></a>2、恢复博客目录和配置</h2><p>按照【Hexo 系列-2: 安装和配置】介绍的，先安装node js环境和hexo框架。<br>再将备份的blog解压恢复至原来或者新的位置即可。</p><p>完毕，就可以像原来那样，创建新的文章进行本地预览、上传github服务器等操作了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、备份博客目录和配置&quot;&gt;&lt;a href=&quot;#1、备份博客目录和配置&quot; class=&quot;headerlink&quot; title=&quot;1、备份博客目录和配置&quot;&gt;&lt;/a&gt;1、备份博客目录和配置&lt;/h2&gt;&lt;p&gt;如果操作系统需要重新安装，则需要在安装前将你的博客工作目录如blog
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://dbaspider.github.io/2021/01/09/hello-world/"/>
    <id>https://dbaspider.github.io/2021/01/09/hello-world/</id>
    <published>2021-01-09T15:29:41.125Z</published>
    <updated>2020-02-06T11:23:11.444Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>必须了解的五个服务器基础问题</title>
    <link href="https://dbaspider.github.io/2020/02/29/%E5%BF%85%E9%A1%BB%E4%BA%86%E8%A7%A3%E7%9A%84%E4%BA%94%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98/"/>
    <id>https://dbaspider.github.io/2020/02/29/%E5%BF%85%E9%A1%BB%E4%BA%86%E8%A7%A3%E7%9A%84%E4%BA%94%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98/</id>
    <published>2020-02-29T09:20:08.000Z</published>
    <updated>2020-02-29T09:28:41.406Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们来说说服务器基础知识方面的几个问题，也是困惑初涉服务器领域众“菜鸟”们的几个常见问题:</p><h3 id="1、双路等于双核么"><a href="#1、双路等于双核么" class="headerlink" title="1、双路等于双核么?"></a>1、双路等于双核么?</h3><p>问题:常听说双路至强XX式服务器，最近又出现了双核至强，都是两个CPU，是不是双路等于双核?</p><p>答案:不是</p><p>无论服务器的单路、双路、四路乃至八路，其中的“路”都是指服务器物理CPU的数量，也就是服务器主板上CPU插槽的数量。</p><p>最近出现的双核处理器，是在一颗物理CPU内部封装了两个CPU核心，这样的好处在于能够让用户在成本增加不多的前提下，拥有更强劲的性能。而且能够比较显著的降低性能功耗比，这对企业用户节约使用成本也有积极的意义。</p><h3 id="2、至强与奔腾的区别"><a href="#2、至强与奔腾的区别" class="headerlink" title="2、至强与奔腾的区别"></a>2、至强与奔腾的区别</h3><p>问题:在不少服务器中，有拿至强作处理器的，也有拿奔腾4当作处理器的，除了用奔腾4处理器的服务器产品呢便宜些，至强与奔腾还有什么区别?</p><p>Intel 奔腾4 631 3.0GHz(盒)</p><p>Intel Xeon 3.2G(800MHz/2M/盒)</p><p>答案:服务器上用的至强处理器和普通的P4处理器其内核基本上是一样的。</p><p>区别之一是英特尔奔腾4处理器开始，便将奔腾4处理器归为个人处理器，用户不能以2颗奔腾4处理器来构架2路服务器系统，而开发出运算效能更高的至强处理器。至强处理器目前分为至强DP(最大支持双路处理)和至强MP(最大支持8路处理)。</p><p>区别之二就是二级缓存不同。至强的二级缓存是1MB～16MB，P4的二级缓存是512KB～1MB，而二级缓存的容量也是决定服务器处理效能的重要因素。</p><p>至强系列CPU多为604接口，而P4的CPU，多为478针或是775架构。</p><p>注:在X86架构下，服务器除了使用英特尔奔腾、至强系列处理器外，AMD也为服务器提供了专门的处理器-皓龙Opteron，最大可支持8路。</p><p>AMD Opteron皓龙 865(散)</p><h3 id="3、服务器的几种类型"><a href="#3、服务器的几种类型" class="headerlink" title="3、服务器的几种类型"></a>3、服务器的几种类型</h3><p>问题:服务器按照结构划分，有几种类型?</p><p>答案:目前按照外形结构划分，服务器可分为塔式、机架式、刀片式三种类型。</p><h5 id="■-塔式服务器"><a href="#■-塔式服务器" class="headerlink" title="■ 塔式服务器"></a>■ 塔式服务器</h5><p>一般的塔式服务器机箱和我们常用的PC机箱差不多，而大型的塔式机箱就要粗大很多，总的来说外形尺寸没有固定标准。</p><h5 id="■-机架式服务器"><a href="#■-机架式服务器" class="headerlink" title="■ 机架式服务器"></a>■ 机架式服务器</h5><p>机架式服务器是由于满足企业的密集部署，形成的以19英寸机架作为标准宽度的服务器类型，高度则从1U到数U。将服务器放置到机架上，并不仅仅有利于日常的维护及治理，也可能避免意想不到的故障。首先，放置服务器不占用过多空间。机架服务器整洁地排放在机架中，不会浪费空间。其次，连接线等也能够整洁地收放到机架里。电源线和LAN线等全都能在机柜中布好线，可以减少堆积在地面上的连接线，从而防止脚踢掉电线等事故的发生。</p><p>规定的尺寸是服务器的宽(48.26cm=19英寸)与高(4.445cm的倍数)。由于宽为19英寸，所以有时也将满足这一规定的机架称为“19英寸机架”。</p><h5 id="■-刀片式服务器"><a href="#■-刀片式服务器" class="headerlink" title="■ 刀片式服务器"></a>■ 刀片式服务器</h5><p>刀片服务器是一种HAHD(High Availability High Density，高可用高密度)的低成本服务器平台，是专门为非凡应用行业和高密度计算机环境设计的，其中每一块“刀片”实际上就是一块系统母板，类似于一个个独立的服务器。在这种模式下，每一个母板运行自己的系统，服务于指定的不同用户群，相互之间没有关联。不过可以使用系统软件将这些母板集合成一个服务器集群。在集群模式下，所有的母板可以连接起来提供高速的网络环境，可以共享资源，为相同的用户群服务。</p><h3 id="4、“U”是什么"><a href="#4、“U”是什么" class="headerlink" title="4、“U”是什么?"></a>4、“U”是什么?</h3><p>问题:平常说1U、2U服务器中的“U”是什么意思?是指服务器处理器个数么?</p><p>答案:“U”在服务器领域中特指机架式服务器厚度，是一种表示服务器外部尺寸的单位，是unit的缩略语，具体尺寸由作为业界团体的美国电子工业协会(EIA)决定。</p><p>之所以要规定服务器的尺寸，是为了使服务器保持适当的尺寸以便放在铁质或铝质机架上。机架上有固定服务器的螺孔，将它与服务器的螺孔对好，用螺丝加以固定。</p><p>厚度以4.445cm为基本单位。1U就是4.445cm，2U则是1U的2倍为8.89cm。也就是说，所谓“1U的机架式服务器”，就是外形满足EIA规格、厚度为4.445cm的产品。</p><h3 id="5、服务器与工作站的区别是什么"><a href="#5、服务器与工作站的区别是什么" class="headerlink" title="5、服务器与工作站的区别是什么?"></a>5、服务器与工作站的区别是什么?</h3><p>问题:服务器与工作站的区别是什么?</p><p>服务器是给工作站提供各种服务的，网络通信服务，文件共享服务，硬件共享服务，各种资源服务。工作站在获取服务器各种资源的同时也可以帮服务器分流计算等任务。</p><p>服务器和工作站都是高性能的计算机，只是相对而言服务器专注于数据吞吐能力，所以支持的外设(硬盘、I/O插槽等)更多;而工作站则专注于图形处理能力，所以外设则相对少一些，但采用非凡为图形处理设计的架构，采用高档显示卡，支持3D图像处理。工作站主要应用在各种设计、多媒体制作领域。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我们来说说服务器基础知识方面的几个问题，也是困惑初涉服务器领域众“菜鸟”们的几个常见问题:&lt;/p&gt;
&lt;h3 id=&quot;1、双路等于双核么&quot;&gt;&lt;a href=&quot;#1、双路等于双核么&quot; class=&quot;headerlink&quot; title=&quot;1、双路等于双核么?&quot;&gt;&lt;/a&gt;1、双
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Docker系列之3-常用命令</title>
    <link href="https://dbaspider.github.io/2020/02/22/Docker%E7%B3%BB%E5%88%97%E4%B9%8B3-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://dbaspider.github.io/2020/02/22/Docker%E7%B3%BB%E5%88%97%E4%B9%8B3-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2020-02-22T15:09:22.000Z</published>
    <updated>2020-02-22T15:48:21.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用-Docker-命令列表"><a href="#常用-Docker-命令列表" class="headerlink" title="常用 Docker 命令列表"></a>常用 Docker 命令列表</h2><p>目前，Docker 共有 13 个管理命令和 41 个通用命令，以下是常用 Docker 命令列表：<br>docker help     — 列出 Docker 可用命令；<br>docker attach     — 将本地输入、输出、错误流附加到正在运行的容器；<br>docker commit     — 从当前更改的容器状态创建新镜像；<br>docker exec     — 在活动或正在运行的容器中运行命令；<br>docker history     — 显示镜像历史记录；<br>docker info     — 显示系统范围信息；<br>docker inspect     — 查找有关 docker 容器和镜像的系统级信息；<br>docker login     — 登录到本地注册表或 Docker Hub；<br>docker pull     — 从本地注册表或 Docker Hub 中提取镜像或存储库；<br>docker ps         — 列出容器的各种属性；<br>docker restart     — 停止并启动容器；<br>docker rm         — 移除容器；<br>docker rmi         — 删除镜像；<br>docker run         — 在隔离容器中运行命令；<br>docker search     — 在 Docker Hub 中搜索镜像；<br>docker start     — 启动已停止的容器；<br>docker stop     — 停止运行容器；<br>docker version     — 提供 docker 版本信息。</p><h2 id="查看-Docker-版本和系统信息"><a href="#查看-Docker-版本和系统信息" class="headerlink" title="查看 Docker 版本和系统信息"></a>查看 Docker 版本和系统信息</h2><p>无论是在本地还是云端，我们都需要检查 Docker 版本和系统信息，可以使用以下命令找到 Docker 版本:<br>$ docker version</p><p>该命令将显示部分设备信息，比如服务器版本、存储驱动程序、内核版本、操作系统、总内存等。当尝试为当前 Docker 安装启动新资源或尝试找出系统级资源分配问题时，这些信息非常有用，这也是检查运行、停止容器数量及下载镜像数量的快速方法。<br>$ docker info</p><h2 id="搜索和下载-Docker-镜像"><a href="#搜索和下载-Docker-镜像" class="headerlink" title="搜索和下载 Docker 镜像"></a>搜索和下载 Docker 镜像</h2><p>可以使用 docker search 命令在 Docker Hub 搜索已有镜像：<br>$ docker search ubuntu</p><p>以上对 ubuntu 的搜索显示可用镜像、描述和官方状态等信息。如果要下载 ubuntu 镜像，可以使用 docker pull 命令：<br>$ docker pull ubuntu<br>$ docker pull nginx</p><p>如果寻找 Ubuntu 16.04 版本，可使用 16.04 标签下载特定版本：<br>$ docker pull ubuntu:16.04</p><h2 id="查看-Docker-镜像"><a href="#查看-Docker-镜像" class="headerlink" title="查看 Docker 镜像"></a>查看 Docker 镜像</h2><p>使用 docker info 命令查找拥有镜像数量：<br>$ docker info<br>Containers: 0<br>Running: 0<br>Paused: 0<br>Stopped: 0<br>Images: 1<br>…</p><p>docker images 命令可详细列出拥有镜像：<br>$ docker images<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>ubuntu              16.04               5e8b97a2a082        2 weeks ago         114MB<br>ubuntu              latest              113a43faa138        2 weeks ago         81.2MB<br>nginx               latest              cd5239a0906a        2 weeks ago         109MB</p><h2 id="运行镜像的-Docker-容器"><a href="#运行镜像的-Docker-容器" class="headerlink" title="运行镜像的 Docker 容器"></a>运行镜像的 Docker 容器</h2><p>假设想在 docker 上运行 NGINX 服务器，可运行以下命令：<br>$ docker run -p 8080:80 nginx</p><p>用 run 命令从 Docker Hub 提取 nginx 映像创建 NGINX 容器。 -p 8080:80 会告诉 Docker 将 localhost 端口 8080 映射到 Docker 容器端口 80，应该能够从 http:// localhost:8080 访问 NGINX 服务器。</p><p>NGINX 容器已附加到命令行。如果退出命令行，容器将会停止，可使用 detach（’-d’）启动 NGINX 容器，这样即使退出命令行也可继续运行。<br>$ docker run -p 8080:80 -d nginx<br>以上命令将以分离模式启动容器并返回命令行。</p><p>也可在容器创建过程中为容器命名。创建一个名为 my_nginx 的 NGINX 容器：<br>$ docker run –name my_nginx -p 8888:80 -d nginx</p><h2 id="使用-docker-ps-命令列出-Docker-容器"><a href="#使用-docker-ps-命令列出-Docker-容器" class="headerlink" title="使用 docker ps 命令列出 Docker 容器"></a>使用 docker ps 命令列出 Docker 容器</h2><p>docker ps 命令允许查找正在运行的所有容器：<br>$ docker ps</p><p>要显示暂停或已停止的容器，需要加 -a 选项：<br>$ docker ps -a</p><h2 id="启动，停止，重启和杀死容器"><a href="#启动，停止，重启和杀死容器" class="headerlink" title="启动，停止，重启和杀死容器"></a>启动，停止，重启和杀死容器</h2><p>假设要停止’my_nginx’容器，可使用 CONTAINER ID 或 NAME。<br>$ docker stop my_nginx</p><p>如果’my_nginx’容器处于退出状态。可使用 docker start 再次启动容器：<br>$ docker start my_nginx</p><p>如果由于某些问题而需重启容器，则可使用 restart 命令，这比单独停止和启动容器速度更快：<br>$ docker restart my_nginx</p><p>可以像进程一样终止 docker 容器，比如终止 my_nginx 容器：<br>$ docker kill my_nginx</p><h2 id="Docker-Exec-Bash-和-Docker-SSH"><a href="#Docker-Exec-Bash-和-Docker-SSH" class="headerlink" title="Docker Exec Bash 和 Docker SSH"></a>Docker Exec Bash 和 Docker SSH</h2><p>如果需要与 shell 进行交互以创建服务或解决问题，可以使用 docker exec 命令创建交互式 shell。比如，用 bash shell 从 ubuntu 映像启动一个容器：<br>$ docker run –name my_ubuntu -it ubuntu:latest bash<br>root@a19c770b8621:/#</p><p>root @haracle＃表示位于 Docker 容器的 bash shell 中，可以运行 shell 命令：<br>root@a19c770b8621:/# ls<br>bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var<br>root@a19c770b8621:/# pwd<br>/</p><p>如果 my_ubuntu 正在运行。假设想将 Docker ssh 放入’my_ubuntu’容器中，可以使用 docker exec bash：<br>$ docker exec -it my_ubuntu bash<br>root@a19c770b8621:/#<br>使用 docker exec 向容器发出命令。例如，可以直接用命令提示符在 my_ubuntu 容器上运行 ls 命令：<br>$ docker exec -it my_ubuntu ls<br>bin dev home lib64 mnt proc run srv tmp var<br>boot etc lib media opt root sbin sys usr</p><h2 id="以分离模式启动容器并使用-docker-attach"><a href="#以分离模式启动容器并使用-docker-attach" class="headerlink" title="以分离模式启动容器并使用 docker attach"></a>以分离模式启动容器并使用 docker attach</h2><p>以上示例用附加模式启动 ubuntu 容器，我们也可在分离模式下启动：<br>$ docker run -it -d –name my_ubuntu_2 ubuntu:latest bash<br>75b28b7208359137b3e1dc2843387918e28b4c6c4860ef0cdeac79c205f5cbc4<br>验证容器是否正在运行：<br>$ docker ps<br>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES<br>75b28b720835        ubuntu:latest       “bash”                   3 minutes ago       Up 3 minutes </p><p>使用 docker attach 命令获取 docker exec bash-like 效果：<br>$ docker attach my_ubuntu_2<br>root@75b28b720835:/#</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用-Docker-命令列表&quot;&gt;&lt;a href=&quot;#常用-Docker-命令列表&quot; class=&quot;headerlink&quot; title=&quot;常用 Docker 命令列表&quot;&gt;&lt;/a&gt;常用 Docker 命令列表&lt;/h2&gt;&lt;p&gt;目前，Docker 共有 13 个管理命令和
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Docker系列之2-安装</title>
    <link href="https://dbaspider.github.io/2020/02/20/Docker%E7%B3%BB%E5%88%97%E4%B9%8B2-%E5%AE%89%E8%A3%85/"/>
    <id>https://dbaspider.github.io/2020/02/20/Docker%E7%B3%BB%E5%88%97%E4%B9%8B2-%E5%AE%89%E8%A3%85/</id>
    <published>2020-02-20T15:16:16.000Z</published>
    <updated>2020-02-20T15:40:44.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><p>Docker现在分为两个版本，Docker CE和Docker EE。其中Docker CE为开源版，Docker EE为企业版。<br>Docker CE：安装 Docker Engine-Community 版本，这个是免费版本，正常够用了。<br>另外没有特别说明，下面操作默认用户都是root。</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h4 id="安装所需的软件包"><a href="#安装所需的软件包" class="headerlink" title="安装所需的软件包"></a>安装所需的软件包</h4><p>yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p><p>yum install -y yum-utils <br>  device-mapper-persistent-data <br>  lvm2</p><h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><p>使用 Docker 仓库进行安装。在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</p><p>使用以下命令来设置稳定的仓库，下面这个是官方源。<br>yum-config-manager <br>    –add-repo <br>    <a href="https://download.docker.com/linux/centos/docker-ce.repo" target="_blank" rel="noopener">https://download.docker.com/linux/centos/docker-ce.repo</a>  </p><p>这个是阿里云的镜像源，国内会快些：<br>yum-config-manager –add-repo <a href="https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo" target="_blank" rel="noopener">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a>    </p><p>根据自己情况选择一个即可。</p><h4 id="安装-Docker-CE"><a href="#安装-Docker-CE" class="headerlink" title="安装 Docker CE"></a>安装 Docker CE</h4><p>安装最新版本的 Docker Engine-Community 和 containerd，或者转到下一步安装特定版本：<br>yum install docker-ce docker-ce-cli containerd.io</p><p>如果提示您接受 GPG 密钥，请选是。</p><h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><p>Docker 安装完默认未启动。并且已经创建好 docker 用户组，但该用户组下没有用户。</p><h4 id="启动-Docker"><a href="#启动-Docker" class="headerlink" title="启动 Docker"></a>启动 Docker</h4><p>systemctl start docker</p><p>不想每次都手工启动docker服务，可运行下面命令设置随系统自动启动：<br>systemctl enable docker</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>通过运行 hello-world 映像来验证是否正确安装了 Docker Engine-Community 。<br>docker run hello-world</p><p>如果能看到下面输出就表明成功了：</p><p>Hello from Docker!<br>This message shows that your installation appears to be working correctly.</p><p>To generate this message, Docker took the following steps:</p><ol><li>The Docker client contacted the Docker daemon.</li><li>The Docker daemon pulled the “hello-world” image from the Docker Hub.<br>(amd64)</li><li>The Docker daemon created a new container from that image which runs the<br>executable that produces the output you are currently reading.</li><li>The Docker daemon streamed that output to the Docker client, which sent it<br>to your terminal.</li></ol><p>To try something more ambitious, you can run an Ubuntu container with:<br> $ docker run -it ubuntu bash</p><p>Share images, automate workflows, and more with a free Docker ID:<br> <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><p>For more examples and ideas, visit:<br> <a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener">https://docs.docker.com/get-started/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;版本选择&quot;&gt;&lt;a href=&quot;#版本选择&quot; class=&quot;headerlink&quot; title=&quot;版本选择&quot;&gt;&lt;/a&gt;版本选择&lt;/h2&gt;&lt;p&gt;Docker现在分为两个版本，Docker CE和Docker EE。其中Docker CE为开源版，Docker EE为企
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>公共DNS服务器介绍</title>
    <link href="https://dbaspider.github.io/2020/02/19/%E5%85%AC%E5%85%B1DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>https://dbaspider.github.io/2020/02/19/%E5%85%AC%E5%85%B1DNS%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-02-19T03:46:44.000Z</published>
    <updated>2020-02-29T11:30:02.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DNS-简介"><a href="#DNS-简介" class="headerlink" title="DNS 简介"></a>DNS 简介</h2><p>DNS（Domain Name System）中文意思为域名解析服务器，它在互联网的作用是把域名转换成为网络可以识别的IP地址。</p><h2 id="DNS-劫持"><a href="#DNS-劫持" class="headerlink" title="DNS 劫持"></a>DNS 劫持</h2><p>域名劫持是互联网攻击的一种方式，通过攻击域名解析服务器（DNS），或伪造域名解析服务器（DNS）的方法，把目标网站域名解析到错误的地址从而实现用户无法访问目标网站的目的。<br>当然，有时候是上网服务提供商(ISP)自己故意搞得劫持，国内用户普遍使用的是ISP运营商提供的DNS服务器，可能会干扰用户正常上网，比如弹广告、阻止访问某些网站等。</p><p><a href="https://juejin.im/post/59ba146c6fb9a00a4636d8b6" target="_blank" rel="noopener">深入理解Http请求、DNS劫持与解析</a><br><a href="https://juejin.im/post/59ba146c6fb9a00a4636d8b6" target="_blank" rel="noopener">https://juejin.im/post/59ba146c6fb9a00a4636d8b6</a></p><h2 id="怎么查看当前使用的DNS服务器地址"><a href="#怎么查看当前使用的DNS服务器地址" class="headerlink" title="怎么查看当前使用的DNS服务器地址"></a>怎么查看当前使用的DNS服务器地址</h2><h3 id="Windows-系统"><a href="#Windows-系统" class="headerlink" title="Windows 系统"></a>Windows 系统</h3><p>打开cmd命令行窗口，输入 ipconfig /all 查看：</p><p>DNS 服务器  . . . . . . . . . . . : 218.2.2.2<br>                                    218.4.4.4</p><h3 id="Linux-系统"><a href="#Linux-系统" class="headerlink" title="Linux 系统"></a>Linux 系统</h3><p>以 RedHat/CentOS 为例，运行 cat /etc/resolv.conf 查看：<br># Generated by NetworkManager<br>nameserver 8.8.8.8<br>nameserver 114.114.114.114</p><h3 id="苹果机器-MAC-OS"><a href="#苹果机器-MAC-OS" class="headerlink" title="苹果机器 MAC OS"></a>苹果机器 MAC OS</h3><p>同 RedHat/CentOS ：<br>cat /etc/resolv.conf</p><p>不同linux发行版方法可能不同，可具体百度或谷歌搜索确认下。</p><p>比如家里宽带是江苏电信提供的，那么DNS 会是下面几个地址：<br>DNS1: 218.2.2.2    DNS2: 218.4.4.4<br>或者：<br>DNS1: 61.147.37.1 DNS2:    218.2.135.1</p><h2 id="公共域名解析服务DNS"><a href="#公共域名解析服务DNS" class="headerlink" title="公共域名解析服务DNS"></a>公共域名解析服务DNS</h2><p>Public DNS(公共域名解析服务): 相对于ISP或一些商业DNS服务提供商而言，对大众开放且免费。如果不想被ISP DNS劫持、过滤的可以试试。<br>好处：不会有ISP的弹出广告推送广告，有些被ISP DNS过滤的网站可以访问到，比如输错网址不会进电信那个114查询页面等等。<br>坏处：比如如果一个网站有电信、网通双线路并使用智能DNS解析，可能因为使用这些DNS服务，而被视为网通用户走网通线路访问该站。</p><h3 id="Google-Public-DNS"><a href="#Google-Public-DNS" class="headerlink" title="Google Public DNS"></a>Google Public DNS</h3><p>是Google于2009年12月5日起提供的一个免费域名解析服务（DNS）, 以下为此服务的DNS地址：<br>IPv4 地址:<br>8.8.8.8 (google-public-dns-a.google.com)<br>8.8.4.4 (google-public-dns-b.google.com)<br>相对来说，更适合国外以及访问国外网站的用户使用。</p><h3 id="国内-Public-DNS"><a href="#国内-Public-DNS" class="headerlink" title="国内 Public DNS"></a>国内 Public DNS</h3><p>■ 114.114.114.114 / 114.114.115.115: 是国内移动、电信和联通通用的DNS，手机和电脑端都可以使用，干净无广告，解析成功率相对来说更高，国内用户使用的比较多，而且速度相对快、稳定，是国内用户上网常用的DNS。<br>■ 180.76.76.76: 百度提供<br>■ 223.5.5.5 / 223.6.6.6: 阿里提供<br>■ 1.2.4.8 / 210.2.4.8 : CNNIC 提供<br>■ 208.67.222.222 / 208.67.220.220 : OpenDNS 提供<br>■ 119.29.29.29 : Dnspod的公共DNS，也就是腾讯公共DNS，节点很多，用户很多<br>■ 117.50.11.11 / 52.80.66.66 : 拦截版 - 微步在线出品，定位于小众用户的精品公共DNS服务，通过大数据分析实现了恶意网站拦截、广告过滤和上网加速功能<br>■ 117.50.10.10 / 52.80.52.52 : 纯净版 - 微步在线出品，定位于小众用户的精品公共DNS服务，通过大数据分析实现了恶意网站拦截、广告过滤和上网加速功能</p><h3 id="国内-Public-DNS-1"><a href="#国内-Public-DNS-1" class="headerlink" title="国内 Public DNS"></a>国内 Public DNS</h3><p>■ 1.1.1.1 : Cloudflare 与 APNIC 的合作项目非盈利，主打隐私保护和高速，这个非常牛的ip地址己经展示了项目实力，但是国内不推荐使用，速度慢<br>■ 8.8.8.8 / 8.8.4.4 : Google Public DNS 四个8，一看就是金主，暴发户<br>■ 80.80.80.80 / 80.80.81.81 : Freenom World是快速且保护隐私的DNS服务器.一家国外免费域名注册商，推出了此项免费服务</p><h2 id="常用-DNS-服务器-IP-地址"><a href="#常用-DNS-服务器-IP-地址" class="headerlink" title="常用 DNS 服务器 IP 地址"></a>常用 DNS 服务器 IP 地址</h2><p><a href="https://www.ip.cn/dns.html" target="_blank" rel="noopener">常用 DNS 服务器 IP 地址</a><br><a href="https://www.ip.cn/dns.html" target="_blank" rel="noopener">https://www.ip.cn/dns.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DNS-简介&quot;&gt;&lt;a href=&quot;#DNS-简介&quot; class=&quot;headerlink&quot; title=&quot;DNS 简介&quot;&gt;&lt;/a&gt;DNS 简介&lt;/h2&gt;&lt;p&gt;DNS（Domain Name System）中文意思为域名解析服务器，它在互联网的作用是把域名转换成为网络
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Docker系列之1-环境准备</title>
    <link href="https://dbaspider.github.io/2020/02/16/Docker%E7%B3%BB%E5%88%97%E4%B9%8B1-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    <id>https://dbaspider.github.io/2020/02/16/Docker%E7%B3%BB%E5%88%97%E4%B9%8B1-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</id>
    <published>2020-02-16T09:57:17.000Z</published>
    <updated>2020-02-16T15:46:23.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>■ PC主机：Windows 7 64-bit(内存12GB + 硬盘ATA 1GB)</p><p>■ 虚拟机软件：VMware-workstation-full-14.1.3-9474260.exe<br>  下载地址：<a href="https://my.vmware.com/en/web/vmware/info/slug/desktop_end_user_computing/vmware_workstation_pro/14_0" target="_blank" rel="noopener">https://my.vmware.com/en/web/vmware/info/slug/desktop_end_user_computing/vmware_workstation_pro/14_0</a><br>  建议网上搜索其他下载源，VMware官网要注册用户后才能下载，比较麻烦。</p><p>■ Linux使用CentOS 7.5<br>  下载地址 <a href="http://mirrors.huaweicloud.com/repository/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1804.iso" target="_blank" rel="noopener">http://mirrors.huaweicloud.com/repository/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1804.iso</a></p><h2 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h2><p>1、先安装VMware-workstation;<br>2、再虚拟机安装CentOS 7.5, 配置参考:<br>    ■ 虚拟机网络配置选择NAT模式;<br>    ■ CPU 配置为 2 x 2 = 4 内核;<br>    ■ 硬盘SCSI模式，大小40GB;<br>3、PC主机网络为通过无线宽带路由器上网模式，地址配置为:<br>   IP: 192.168.1.104<br>   网络掩码：255.255.255.0<br>   DHCP：192.168.1.1<br>   默认网关: 192.168.1.1<br>   DNS: 218.2.2.2 / 218.4.4.4</p><h2 id="虚拟机网络配置"><a href="#虚拟机网络配置" class="headerlink" title="虚拟机网络配置"></a>虚拟机网络配置</h2><h3 id="1、主机名修改"><a href="#1、主机名修改" class="headerlink" title="1、主机名修改"></a>1、主机名修改</h3><p>安装完成后请修改IP地址和hostname，方法请参见:<br><a href="https://blog.csdn.net/twingao/article/details/80217938" target="_blank" rel="noopener">CentOS 7 修改IP地址和主机名</a><br><a href="https://blog.csdn.net/twingao/article/details/80217938" target="_blank" rel="noopener">https://blog.csdn.net/twingao/article/details/80217938</a><br>我这里设置主机名为 docker1</p><h3 id="2、网络地址配置"><a href="#2、网络地址配置" class="headerlink" title="2、网络地址配置"></a>2、网络地址配置</h3><p>虚拟机安装的时候选择NAT模式，建议配置虚拟机的ip为固定，参照：<br><a href="https://blog.csdn.net/weixin_33853827/article/details/92279870" target="_blank" rel="noopener">VMware Workstation装CentOS7虚拟机NAT方式上网</a><br><a href="https://blog.csdn.net/weixin_33853827/article/details/92279870" target="_blank" rel="noopener">https://blog.csdn.net/weixin_33853827/article/details/92279870</a></p><p>完成后docker1的配置：<br>■ ifconfig -a<br>    ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 192.168.110.3  netmask 255.255.255.0  broadcast 192.168.110.255</p><p>■ cat /etc/sysconfig/network-scripts/ifcfg-ens33<br>    TYPE=Ethernet<br>    PROXY_METHOD=none<br>    BROWSER_ONLY=no<br>    BOOTPROTO=none<br>    DEFROUTE=yes<br>    IPV4_FAILURE_FATAL=no<br>    IPV6INIT=yes<br>    IPV6_AUTOCONF=yes<br>    IPV6_DEFROUTE=yes<br>    IPV6_FAILURE_FATAL=no<br>    IPV6_ADDR_GEN_MODE=stable-privacy<br>    NAME=ens33<br>    UUID=650f3a53-7ac2-4ab5-9f06-5440b5a1351d<br>    DEVICE=ens33<br>    ONBOOT=yes<br>    IPADDR0=192.168.110.3<br>    PREFIX0=24<br>    GATEWAY0=192.168.110.2<br>    DNS1=8.8.8.8<br>    DNS2=114.114.114.114<br>    IPV6_PEERDNS=yes<br>    IPV6_PEERROUTES=yes</p><h2 id="浏览器Chrome安装"><a href="#浏览器Chrome安装" class="headerlink" title="浏览器Chrome安装"></a>浏览器Chrome安装</h2><p>Centos自带浏览器是Firefox，不太好用，建议安装Chrome。<br>这里安装Chrome浏览器是为了在线查资料方便copy/paste，不用在windows和虚拟机之间来回切换了。</p><h3 id="方法1：在线安装"><a href="#方法1：在线安装" class="headerlink" title="方法1：在线安装"></a>方法1：在线安装</h3><p>使用下面的命令，在root用户下就可以安装最新的 Google Chrome:<br>yum install <a href="https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm" target="_blank" rel="noopener">https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</a></p><h3 id="方法2：离线安装"><a href="#方法2：离线安装" class="headerlink" title="方法2：离线安装"></a>方法2：离线安装</h3><p>wget <a href="https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm" target="_blank" rel="noopener">https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</a><br>yum localinstall google-chrome-stable_current_x86_64.rpm</p><h3 id="启动浏览器"><a href="#启动浏览器" class="headerlink" title="启动浏览器"></a>启动浏览器</h3><p>安装完毕，在工具栏菜单 Applications -&gt; Internet 下面就可以看到Google Chrome了。<br>点击启动，会发现Chrome启动不成功（非root用户可以），在shell窗口执行下，可以看到下面错误:<br>cd opt/google/chrome<br>./google-chrome<br>[5280:5280:0217/004229.243603:ERROR:zygote_host_impl_linux.cc(89)] Running as root without –no-sandbox is not supported. See <a href="https://crbug.com/638180" target="_blank" rel="noopener">https://crbug.com/638180</a>.</p><p>需要修改下Chrome的启动脚本 google-chrome：<br>最后一行的后面加上 –no-sandbox参数即可：<br># Note: exec -a below is a bashism.<br>exec -a “$0” “$HERE/chrome” “$@” –no-sandbox</p><p>修改完毕，也可以通过shell窗口下面命令启动Chrome：<br>[root@docker1 chrome]# google-chrome &amp;<br>[1] 5439<br>[root@docker1 chrome]# Fontconfig warning: “/etc/fonts/fonts.conf”, line 86: unknown element “blank”<br>[5439:5439:0217/004630.373013:ERROR:edid_parser.cc(102)] Too short EDID data: manufacturer id<br>[5473:5473:0217/004631.873054:ERROR:viz_main_impl.cc(161)] Exiting GPU process due to errors during initialization<br>这个Fontconfig warning不必理会，不影响使用。</p><p>至此环境准备完成了，后面介绍docker的安装。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;&lt;p&gt;■ PC主机：Windows 7 64-bit(内存12GB + 硬盘ATA 1GB)&lt;/p&gt;
&lt;p&gt;■ 虚拟机软件：VMw
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>PDF阅读器推荐</title>
    <link href="https://dbaspider.github.io/2020/02/13/PDF%E9%98%85%E8%AF%BB%E5%99%A8%E6%8E%A8%E8%8D%90/"/>
    <id>https://dbaspider.github.io/2020/02/13/PDF%E9%98%85%E8%AF%BB%E5%99%A8%E6%8E%A8%E8%8D%90/</id>
    <published>2020-02-13T13:55:07.000Z</published>
    <updated>2020-02-13T15:15:25.250Z</updated>
    
    <content type="html"><![CDATA[<p>PDF(Portable Document Format，便携式文档格式)，是由Adobe Systems用于与应用程序、操作系统、硬件无关的方式进行文件交换所发展出的文件格式。PDF文件以PostScript语言图象模型为基础，无论在哪种打印机上都可保证精确的颜色和准确的打印效果，即PDF会忠实地再现原稿的每一个字符、颜色以及图象。是当前因特网上最流行的电子书格式，其他的还有epub/mobi等几种。</p><h3 id="Adobe-Reader"><a href="#Adobe-Reader" class="headerlink" title="Adobe Reader"></a>Adobe Reader</h3><p>PDF格式发明者Adobe公司出品的官方阅读器，以前在选择很少的时候基本是作为PC上独裁的存在。<br>最新版本叫Adobe Reader XI / Adobe Reader DC，安装体积较大，现在的新版本安装后要200多MB。<br>建议作为备选，只有在其他阅读器打不开或者有乱码的时候，才考虑使用它。<br><a href="https://get.adobe.com/cn/reader/otherversions/" target="_blank" rel="noopener">Adobe Acrobat Reader DC</a><br><a href="https://get.adobe.com/cn/reader/otherversions/" target="_blank" rel="noopener">https://get.adobe.com/cn/reader/otherversions/</a></p><h3 id="福昕阅读器-Foxit-Reader"><a href="#福昕阅读器-Foxit-Reader" class="headerlink" title="福昕阅读器(Foxit Reader)"></a>福昕阅读器(Foxit Reader)</h3><p>福昕软件出品的一款免费阅读器，体积较小，打开文件快速，兼容支持性也不错。<br><a href="https://www.foxitsoftware.cn/pdf-reader/" target="_blank" rel="noopener">福昕阅读器</a><br><a href="https://www.foxitsoftware.cn/pdf-reader/" target="_blank" rel="noopener">https://www.foxitsoftware.cn/pdf-reader/</a></p><h3 id="迅读PDF大师"><a href="#迅读PDF大师" class="headerlink" title="迅读PDF大师"></a>迅读PDF大师</h3><p>迅读PDF大师是一款超轻巧的PDF阅读器，启动速度极快，占用内存极少；提供多种阅读模式，支持全屏、幻灯片模式；查找和目录功能 使阅读更加精准；软件完全兼容Adobe Reader格式，还同时支持EPUB、MOBI等多种文档格式；提供pdf转换功能，导出word、excel、 ppt等Office文件格式。<br><a href="http://www.xundupdf.com" target="_blank" rel="noopener">迅读PDF大师</a><br><a href="http://www.xundupdf.com" target="_blank" rel="noopener">http://www.xundupdf.com</a></p><h3 id="Sumatra-PDF"><a href="#Sumatra-PDF" class="headerlink" title="Sumatra PDF"></a>Sumatra PDF</h3><p>SumatraPDF，风靡全球的免费PDF阅读器这是一款体积小巧的PDF阅读器，具有效率高速度快的优点，对于大体积的pdf文件支持的也很好。<br>同时SumatraPDF是一款开源的、免费、小巧的pdf阅读器，Sumatra PDF 是Windows平台上一款免费阅读器， 它支持打开 PDF， ePub， MOBI， SPS， DjVu， CHM， CBZ 和 CBR 格式。<br>体积最小，免安装版本就一个exe文件，大小还不到7MB大小，基本阅读功能都有，缺点就是没有批注和高亮等功能。<br><a href="https://www.sumatrapdfreader.org/download-free-pdf-viewer.html" target="_blank" rel="noopener">Sumatra PDF</a><br><a href="https://www.sumatrapdfreader.org/download-free-pdf-viewer.html" target="_blank" rel="noopener">https://www.sumatrapdfreader.org/download-free-pdf-viewer.html</a></p><h3 id="PDF-XChange-Viewer"><a href="#PDF-XChange-Viewer" class="headerlink" title="PDF-XChange Viewer"></a>PDF-XChange Viewer</h3><p>PDF-XChange Viewer，速度秒杀其它 PDF 阅读器，尤其在加载高分辨率扫描文件时，就是快。<br>PDF-XChange Viewer 功能比福昕PDF阅读器更丰富，相比官方的 Adobe Reader 体积小、资源占用非常低。<br>此外其多标签式浏览、转换 PDF 为图像、批量搜索、高级搜索等功能也很便民，还有强大亮眼的批注功能。<br>免费版本不能添加注释，安装后体积约60MB，功能感受上最接近Adobe Reader的阅读器了。<br>专业人士必备，整体表现优秀，实属最强大的第三方PDF阅读器之一。<br><a href="https://www.tracker-software.com/product/pdf-xchange-viewer" target="_blank" rel="noopener">pdf-xchange-viewer</a><br><a href="https://www.tracker-software.com/product/pdf-xchange-viewer" target="_blank" rel="noopener">https://www.tracker-software.com/product/pdf-xchange-viewer</a></p><h3 id="Drawboard-PDF"><a href="#Drawboard-PDF" class="headerlink" title="Drawboard PDF"></a>Drawboard PDF</h3><p>Surface与Drawboard PDF真的是绝配了，尤其在记笔记方面，Drawboard可以充分发挥Surface pen和Surface触屏的功能。<br>Drawboard PDF 可以在官网下载，也可以在Microsoft  store直接搜索下载。分两个版本，基础版免费，高级版付费，20.99镑每年，可以解锁高级功能。Surface预装的是基础版。<br><a href="https://www.drawboard.com/" target="_blank" rel="noopener">Drawboard PDF</a><br><a href="https://www.drawboard.com/" target="_blank" rel="noopener">https://www.drawboard.com/</a></p><h3 id="Xodo"><a href="#Xodo" class="headerlink" title="Xodo"></a>Xodo</h3><p>优点：免费，相比Drawboard的最大优势。UI简洁，批注方便。可通过右键或双指敲击触控板实现控制栏的隐藏和展开，这对16:9的宽屏幕非常实用！（需要Unpin Command Bar）自带护眼模式和夜间模式，以及多种自定义配色方案。对笔记本的触控板和指点杆支持良好，非常平滑地滚动页面。友好的文档管理功能。可以打开Word文档。<br>缺点：暂不支持ctrl+z撤销操作。暂不支持中文。启动速度慢。<br><a href="https://www.xodo.com/" target="_blank" rel="noopener">Xodo</a><br><a href="https://www.xodo.com/" target="_blank" rel="noopener">https://www.xodo.com/</a></p><h3 id="Nitro-PDF"><a href="#Nitro-PDF" class="headerlink" title="Nitro PDF"></a>Nitro PDF</h3><p>一个全功能的PDF文件处理器，它可以浏览、编辑、建立 PDF 文档，制作出来的PDF 文件100% 相容于其他的PDF 浏览器，并且拥有类似 Office 2007 一样的漂亮界面外观，可以完全取代高价的Adobe Acrobat Professional。收费软件，全功能软件，没有提供免费独立的阅读器版本。<br><a href="https://www.gonitro.com/nps/pro/pdf-software" target="_blank" rel="noopener">Nitro PDF</a><br><a href="https://www.gonitro.com/nps/pro/pdf-software" target="_blank" rel="noopener">https://www.gonitro.com/nps/pro/pdf-software</a></p><h3 id="万兴-PDF-PDF-Element"><a href="#万兴-PDF-PDF-Element" class="headerlink" title="万兴 PDF / PDF Element"></a>万兴 PDF / PDF Element</h3><p>是一款专业的PDF编辑工具, 既能阅读PDF，又能编辑PDF。在用过的PDF编辑器中，它的综合表现是最好的。论速度，比Acrobat快得多，比Foxit Phantom快一些，比Nitro PDF快不少。论中文支持，比PDF X-Change Editor好得多。<br>论体积，比Acrobat小得多。论OCR，和ABBYY一样，但是比ABBYY多了编辑功能。将PDF转化为Word的功能大赞。<br>缺点是对高分屏的支持太差，几乎要眼瞎的节奏。如果在Win10当中开启系统增强渲染模式，则无法正常运行。<br>此软件是收费软件，无免费版本。中文名叫[万兴PDF]是A股上市公司万兴科技旗下拳头产品.<br><a href="https://pdf.wondershare.com/" target="_blank" rel="noopener">PDF Element</a><br><a href="https://pdf.wondershare.cn/" target="_blank" rel="noopener">万兴 PDF</a><br><a href="https://pdf.wondershare.cn/" target="_blank" rel="noopener">https://pdf.wondershare.cn/</a></p><h3 id="文电通pdf阅读器-gaaiho-pdf-reader"><a href="#文电通pdf阅读器-gaaiho-pdf-reader" class="headerlink" title="文电通pdf阅读器(gaaiho pdf reader)"></a>文电通pdf阅读器(gaaiho pdf reader)</h3><p>目前在用的pdf阅读器，快速，小巧，秒启动，秒开，支持窗口分割(同时显示同一篇pdf文档的不同部分，可以让我一边读论文正文一边看文后参考文献列表)，批注功能比较方便，缺点是不支持自定义快捷键。科研狗必备~<br><a href="https://store.gaaiho.cn/download/reader.aspx" target="_blank" rel="noopener">Gaaiho pdf reader</a><br><a href="https://store.gaaiho.cn/download/reader.aspx" target="_blank" rel="noopener">https://store.gaaiho.cn/download/reader.aspx</a></p><h2 id="个人推荐"><a href="#个人推荐" class="headerlink" title="个人推荐"></a>个人推荐</h2><h3 id="小白用户"><a href="#小白用户" class="headerlink" title="小白用户"></a>小白用户</h3><p>福昕阅读器(Foxit Reader)<br>迅读PDF大师</p><h3 id="极客"><a href="#极客" class="headerlink" title="极客"></a>极客</h3><p>Sumatra PDF</p><h3 id="科研狗"><a href="#科研狗" class="headerlink" title="科研狗"></a>科研狗</h3><p>PDF-XChange Viewer<br>Xodo<br>文电通pdf</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PDF(Portable Document Format，便携式文档格式)，是由Adobe Systems用于与应用程序、操作系统、硬件无关的方式进行文件交换所发展出的文件格式。PDF文件以PostScript语言图象模型为基础，无论在哪种打印机上都可保证精确的颜色和准确的
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hexo系列-4: 站点地图和SEO</title>
    <link href="https://dbaspider.github.io/2020/02/11/Hexo%E7%B3%BB%E5%88%97-4-%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE%E5%92%8CSEO/"/>
    <id>https://dbaspider.github.io/2020/02/11/Hexo%E7%B3%BB%E5%88%97-4-%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE%E5%92%8CSEO/</id>
    <published>2020-02-11T14:49:08.000Z</published>
    <updated>2020-02-11T15:34:08.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="站点地图-Site-Map"><a href="#站点地图-Site-Map" class="headerlink" title="站点地图(Site Map)"></a>站点地图(Site Map)</h2><p>Sitemap 简介：<br>Sitemap 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。<br>最简单的Sitemap 形式，就是XML 文件，在其中列出网站中的网址以及关于<br>每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其<br>他网址的重要程度为何等），以便搜索引擎可以更加智能地抓取网站。</p><h3 id="1、安装sitemap生成插件："><a href="#1、安装sitemap生成插件：" class="headerlink" title="1、安装sitemap生成插件："></a>1、安装sitemap生成插件：</h3><p>打开命令行，确保当前工作目录是blog，依次执行：<br>npm install hexo-generator-sitemap –save<br>npm install hexo-generator-baidu-sitemap –save</p><h3 id="2、配置插件："><a href="#2、配置插件：" class="headerlink" title="2、配置插件："></a>2、配置插件：</h3><p>修改 blog\_config.yml 配置文件，增加下面配置：</p><p># 自动生成sitemap<br>sitemap:<br>  path: sitemap.xml<br>baidusitemap:<br>  path: baidusitemap.xml</p><h3 id="3、生成站点地图："><a href="#3、生成站点地图：" class="headerlink" title="3、生成站点地图："></a>3、生成站点地图：</h3><p>运行 hexo g 命令，可以发现 public 目录下会生成下面sitemap文件，就表示成功了。</p><p>baidusitemap.xml<br>sitemap.xml</p><p>确认没有问题后，运行 hexo d 部署，就可以将站点地图自动提交到github托管仓库上。</p><h3 id="4、向搜索引擎提交站点地图"><a href="#4、向搜索引擎提交站点地图" class="headerlink" title="4、向搜索引擎提交站点地图"></a>4、向搜索引擎提交站点地图</h3><p>百度使用：<a href="https://dbaspider.github.io/baidusitemap.xml">https://dbaspider.github.io/baidusitemap.xml</a><br><a href="https://ziyuan.baidu.com/linksubmit/index" target="_blank" rel="noopener">百度搜索</a> – baidusitemap.xml</p><p>Google使用：<a href="https://dbaspider.github.io/sitemap.xml">https://dbaspider.github.io/sitemap.xml</a><br><a href="https://www.google.com/webmasters/tools" target="_blank" rel="noopener">Google搜索</a> – sitemap.xml</p><p>访问要提交的搜索引擎站点地图地址，里面会有导引，基本操作就是提交你自己blog的sitemap url。<br>当然，一般为了证明网站是你的，搜索引擎还是让你进行验证，这个根据具体指导操作即可。</p><p>提交后，一般一天后就可以查看你的站点是否被收录了。</p><p>谷歌验证：搜索框输入 site:dbaspider.github.io 查看是否有搜索结果。<br>百度验证：搜索框输入 site:dbaspider.github.io 查看是否有搜索结果。</p><h2 id="配置RSS-简易信息聚合"><a href="#配置RSS-简易信息聚合" class="headerlink" title="配置RSS(简易信息聚合)"></a>配置RSS(简易信息聚合)</h2><p>简易信息聚合（Really Simple Syndication）是一种基于XML标准，在互联网上被广泛采用的内容包装和投递协议。RSS是一种描述和同步网站内容的格式，是使用最广泛的XML应用。RSS搭建了信息迅速传播的一个技术平台，使得每个人都成为潜在的信息提供者。发布一个RSS文件后，这个RSS Feed中包含的信息就能直接被其他站点调用。RSS广泛用于网上新闻频道，blog和wiki，主要的版本有0.91, 1.0, 2.0。使用RSS订阅能更快地获取信息，网站提供RSS输出，有利于让用户获取网站内容的最新更新。网络用户可以在客户端借助于支持RSS的聚合工具软件，在不打开网站内容页面的情况下阅读支持RSS输出的网站内容。</p><h3 id="1、安装插件"><a href="#1、安装插件" class="headerlink" title="1、安装插件:"></a>1、安装插件:</h3><p>进入本地blog目录，输入以下命令：<br>npm install hexo-generator-feed</p><h3 id="2、验证RSS"><a href="#2、验证RSS" class="headerlink" title="2、验证RSS:"></a>2、验证RSS:</h3><p>跟sitemap类型，运行 hexo g 命令，可以发现 public 目录下会生成下面atom.xml文件，就表示成功了。<br>RSS阅读器就可以通过访问 <a href="https://dbaspider.github.io/baidusitemap.xml">https://dbaspider.github.io/baidusitemap.xml</a> 获取rss列表了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;站点地图-Site-Map&quot;&gt;&lt;a href=&quot;#站点地图-Site-Map&quot; class=&quot;headerlink&quot; title=&quot;站点地图(Site Map)&quot;&gt;&lt;/a&gt;站点地图(Site Map)&lt;/h2&gt;&lt;p&gt;Sitemap 简介：&lt;br&gt;Sitemap 可
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hexo 系列-3: 发表文章和更换主题</title>
    <link href="https://dbaspider.github.io/2020/02/09/Hexo-%E7%B3%BB%E5%88%97-3-%E5%8F%91%E8%A1%A8%E6%96%87%E7%AB%A0%E5%92%8C%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/"/>
    <id>https://dbaspider.github.io/2020/02/09/Hexo-%E7%B3%BB%E5%88%97-3-%E5%8F%91%E8%A1%A8%E6%96%87%E7%AB%A0%E5%92%8C%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98/</id>
    <published>2020-02-09T14:53:25.000Z</published>
    <updated>2020-02-09T15:11:17.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h1><p>执行命令:<br>hexo n “文章标题”<br>则会在 C:\blog\source_posts 目录下生成相应的md文件，然后直接编辑即可。</p><p>不熟悉MarkDown语法的可以参考下面入门，还是很简单的：<br><a href="http://xianbai.me/learn-md/index.html" target="_blank" rel="noopener">Markdown 入门参考</a></p><p>推荐一个md可视化编辑器:<br><a href="https://typora.io/" target="_blank" rel="noopener">typora</a></p><p>不过还是建议用文本编辑器（比如Notepad++），写好后用typora打开看下效果，有问题再修改。</p><p>文章写好后，启动hexo本地服务进行预览：<br>hexo s </p><p>确认无误，则执行下面命令发布到github上：<br>hexo d</p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>Hexo默认安装了主题landscape，如果想换其他的，可以到 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a> 查看有没有满意的。</p><p>主题安装实际就是将其他的主题（一般都是发布在github上）下载下来，解压后放到下面目录下：<br>C:\blog\themes</p><p>然后修改 blog\_config.yml 配置文件中的theme部分：<br># Extensions<br>## Plugins: <a href="https://hexo.io/plugins/" target="_blank" rel="noopener">https://hexo.io/plugins/</a><br>## Themes: <a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a><br>theme: landscape</p><p>每个主题都自己做了扩展，一般还需要再安装其他的node.js插件和独立配置，请参考每个主题的安装配置文档。</p><p>推荐2个主题：<br><a href="http://eternalzttz.com/hexo-next.html" target="_blank" rel="noopener">hexo-next</a></p><p><a href="https://www.imys.net/" target="_blank" rel="noopener">hexo-theme-indigo</a></p><p>后续再介绍下hexo的一些扩展用法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;发表文章&quot;&gt;&lt;a href=&quot;#发表文章&quot; class=&quot;headerlink&quot; title=&quot;发表文章&quot;&gt;&lt;/a&gt;发表文章&lt;/h1&gt;&lt;p&gt;执行命令:&lt;br&gt;hexo n “文章标题”&lt;br&gt;则会在 C:\blog\source_posts 目录下生成相应的md文
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hexo 系列-2: 安装和配置</title>
    <link href="https://dbaspider.github.io/2020/02/09/Hexo-%E7%B3%BB%E5%88%97-2-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://dbaspider.github.io/2020/02/09/Hexo-%E7%B3%BB%E5%88%97-2-%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</id>
    <published>2020-02-09T14:47:07.000Z</published>
    <updated>2020-02-09T14:49:41.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、安装Node-js"><a href="#1、安装Node-js" class="headerlink" title="1、安装Node.js"></a>1、安装Node.js</h2><p>选择一个稳定版本，比如 node-v12.15.0-x64.msi，选项默认，一路Next即可。<br>最后安装好之后，按Win+R打开命令提示符，输入node -v和npm -v，如果出现版本号，那么就安装成功了。</p><p>添加国内镜像源，使用阿里的国内镜像进行加速。<br>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><h2 id="2、安装Git"><a href="#2、安装Git" class="headerlink" title="2、安装Git"></a>2、安装Git</h2><p>安装选项还是全部默认，安装完成后在命令提示符中输入git –version验证是否安装成功（最后一步添加路径时选择Use Git from the Windows Command Prompt）。<br>没有选择这个的话，可以通过Git Bash启动shell运行命令验证。</p><h2 id="3、注册Github账号"><a href="#3、注册Github账号" class="headerlink" title="3、注册Github账号"></a>3、注册Github账号</h2><p>注册过程这个就赘述了，创建一个repository，名字一定要加.github.io后缀，README初始化也要勾上。<br>比如我的名字是 dbaspider.github.io，后续blog地址就是 <a href="https://dbaspider.github.io/。">https://dbaspider.github.io/。</a></p><p>另外，配置好Github提交代码所需的配置，注意配置好ssh key，建议打开本地保存用户和密码开关，<br>这样每次git push/pull代码时就不会弹出对话框再输入了。<br>git config –global credential.helper store</p><h2 id="4、安装Hexo"><a href="#4、安装Hexo" class="headerlink" title="4、安装Hexo"></a>4、安装Hexo</h2><p>使用npm命令安装Hexo，输入：<br>npm install -g hexo-cli </p><p>安装完成后，创建一个本地目录作为blog的本地保存目录（比如 C:\），确认命令行当前工作目录在此目录下，<br>执行下面命令初始化博客：<br>hexo init blog</p><p>按顺序输入以下三条命令，确认hexo blog已经初始化成功：</p><p>(1) 新建一条blob<br>hexo new test_my_site</p><p>(2) 生成blog页面<br>hexo g</p><p>(3) 启动本地hexo http服务<br>hexo s</p><h2 id="5、推送网站到github上"><a href="#5、推送网站到github上" class="headerlink" title="5、推送网站到github上"></a>5、推送网站到github上</h2><p>推送需要先编辑blog目录下的 _config.yml 文件，做一些必须的配置。</p><p>(1) 站点显示和SEO配置，修改成自己的设置内容：<br># Site<br>title: ‘大风起兮云飞扬’<br>subtitle: ‘进步每一天’<br>description: ‘dbaspider home’<br>keywords: dbaspider<br>author: dbaspider<br>language: zh<br>timezone: ‘Asia/Shanghai’</p><p>另外这里的url修改为实际的blog地址：<br># URL<br>## If your site is put in a subdirectory, set url as ‘<a href="http://yoursite.com/child&#39;" target="_blank" rel="noopener">http://yoursite.com/child&#39;</a> and root as ‘/child/‘<br>url: <a href="https://dbaspider.github.io">https://dbaspider.github.io</a></p><p>(2) Github推送设置：<br># Deployment<br>## Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/docs/deployment.html</a><br>deploy:<br>  type: ‘git’<br>  repo: <a href="https://github.com/dbaspider/dbaspider.github.io.git" target="_blank" rel="noopener">https://github.com/dbaspider/dbaspider.github.io.git</a><br>  branch: master</p><p>(3) 执行推送<br>先安装Git部署插件，输入命令：<br>npm install hexo-deployer-git –save<br>安装一次即可，后面就不用再安装了。</p><p>推送到Github的仓库上，分别输入三条命令：<br>hexo clean<br>hexo g<br>hexo d</p><p>第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="https://dbaspider.github.io">https://dbaspider.github.io</a><br>顺利的话，你的blog就出来了（国内可能有些延迟，如果没有显示出来，可以过几分钟再刷新下即可）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、安装Node-js&quot;&gt;&lt;a href=&quot;#1、安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;1、安装Node.js&quot;&gt;&lt;/a&gt;1、安装Node.js&lt;/h2&gt;&lt;p&gt;选择一个稳定版本，比如 node-v12.15.0-x64.msi，
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
